{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/Modal/BindedDatasets.js\",\n    _s = $RefreshSig$();\n\nimport { Modal, ModalHeader, ModalBody, Button, Row, Col, Container, Table, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport { IconButton, TableRow } from '@material-ui/core';\nimport DeleteOneDataset from '../DeleteOneDataset';\nimport CreateIcon from '@material-ui/icons/Create';\nimport { Link } from 'react-router-dom';\nimport { Loading } from '../LoadingComponent';\nimport ModelBriefInfo from '../ModelBriefInfo';\nimport InsertChart from '@material-ui/icons/InsertChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BindedDatasets(props) {\n  _s();\n\n  const ModelName = localStorage.getItem('modelname') == undefined ? props.modelName : localStorage.getItem('modelname');\n  console.log(\"local get model name: \", ModelName);\n  const [isModalOpen, setModal] = useState(false);\n\n  const toggleModal = () => {\n    setModal(!isModalOpen);\n  }; // while a user chooses not to delete a dataset\n\n\n  const handlenNoBtn = () => {\n    setModal(!isModalOpen);\n  };\n\n  const tableHead = () => {\n    return /*#__PURE__*/_jsxDEV(\"thead\", {\n      style: {\n        backgroundColor: \"lightgray\",\n        color: \"black\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"File name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Operation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  };\n\n  const tableBody = bindedDatasets => {\n    if (bindedDatasets.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"No any binded datasets!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n    } else {\n      console.log(\"get bindedDatasets: \", bindedDatasets);\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            backgroundColor: \"#F2F2F2\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              verticalAlign: 'middle'\n            },\n            children: bindedDatasets[0].FileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              verticalAlign: 'middle'\n            },\n            children: bindedDatasets[0].BriefInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(ModelBriefInfo, {\n                  editModelDescription: props.editModelDescription,\n                  modelName: bindedDatasets[0].FileName,\n                  fetchModelFiles: props.fetchModelFiles\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/visualisation/${bindedDatasets[0].FileName}`,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"visualisation\",\n                    component: \"span\",\n                    children: /*#__PURE__*/_jsxDEV(InsertChart, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this)\n          }, \"operateEachDataset\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, \"model\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), bindedDatasets.slice(1, bindedDatasets.length).map((dataset, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              verticalAlign: 'middle'\n            },\n            children: dataset.FileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              verticalAlign: 'middle'\n            },\n            children: dataset.BriefInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(DeleteOneDataset, {\n                  deleteDataset: props.deleteDataset,\n                  deletedFileName: dataset.FileName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/metadata-form/${dataset.FileName}`,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"create matadata\",\n                    component: \"span\",\n                    children: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 80,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 79,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)\n          }, \"operateEachDataset\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const renderModelTable = (bindedDatasets, isLoading) => {\n    console.log(\"check loading\", isLoading);\n    console.log(\"checked binded dataset: \", bindedDatasets);\n\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Table, {\n        hover: true,\n        size: \"sm\",\n        children: [tableHead(), tableBody(bindedDatasets)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  useEffect(() => {\n    // fetch the existing metadata first\n    console.log(\"start refreshing binded datasets\", props.bindedDatasets);\n    props.getBindedDatasets(ModelName, sessionStorage.getItem('verifiedUsername'));\n  }, [props.bindedDatasets]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n        children: [/*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            style: {\n              color: \"grey\"\n            },\n            to: \"/mymodels\",\n            children: \"My Models\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(BreadcrumbItem, {\n          active: true,\n          children: [\"Binded datasets of \", ModelName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        style: {\n          paddingTop: '5%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: \"grey\"\n          },\n          children: [\"All binded datasets of \", ModelName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: renderModelTable(props.bindedDatasets, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BindedDatasets, \"TAr4lFB3Pe31jURJFvRDXDZCRmc=\");\n\n_c = BindedDatasets;\nexport default BindedDatasets;\n\nvar _c;\n\n$RefreshReg$(_c, \"BindedDatasets\");","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/Modal/BindedDatasets.js"],"names":["Modal","ModalHeader","ModalBody","Button","Row","Col","Container","Table","Breadcrumb","BreadcrumbItem","React","useRef","useState","useEffect","useLayoutEffect","IconButton","TableRow","DeleteOneDataset","CreateIcon","Link","Loading","ModelBriefInfo","InsertChart","BindedDatasets","props","ModelName","localStorage","getItem","undefined","modelName","console","log","isModalOpen","setModal","toggleModal","handlenNoBtn","tableHead","backgroundColor","color","tableBody","bindedDatasets","length","verticalAlign","FileName","BriefInfo","editModelDescription","fetchModelFiles","slice","map","dataset","index","deleteDataset","renderModelTable","isLoading","getBindedDatasets","sessionStorage","paddingTop"],"mappings":"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","sourcesContent":["import { Modal, ModalHeader, ModalBody, Button, Row, Col, Container, Table, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport { IconButton, TableRow } from '@material-ui/core';\nimport DeleteOneDataset from '../DeleteOneDataset';\nimport CreateIcon from '@material-ui/icons/Create';\nimport { Link } from 'react-router-dom';\nimport { Loading } from '../LoadingComponent';\nimport ModelBriefInfo from '../ModelBriefInfo';\nimport InsertChart from '@material-ui/icons/InsertChart';\n\nfunction BindedDatasets(props) {\n    const ModelName = localStorage.getItem('modelname') == undefined ? props.modelName : localStorage.getItem('modelname');\n    console.log(\"local get model name: \", ModelName);\n\n    const [isModalOpen, setModal] = useState(false);\n\n    const toggleModal = () => {\n        setModal(!isModalOpen);\n    };\n\n    // while a user chooses not to delete a dataset\n    const handlenNoBtn = () => {\n        setModal(!isModalOpen);\n    };\n\n    const tableHead = () => {\n        return (\n            <thead style={{backgroundColor: \"lightgray\", color: \"black\"}}>\n                <tr>\n                    <th>File name</th>\n                    <th>Description</th>\n                    <th>Operation</th>\n                </tr>\n            </thead>\n        );\n    }\n\n    const tableBody = (bindedDatasets) => {\n        if (bindedDatasets.length === 0) {\n            return (\n                <tbody>\n                    <div>No any binded datasets!</div>\n                </tbody>\n            );\n        } else {\n            console.log(\"get bindedDatasets: \", bindedDatasets);\n            return (\n                <tbody>\n                    <tr style={{backgroundColor: \"#F2F2F2\"}} key=\"model\">\n                        <td style={{ verticalAlign: 'middle' }}>{bindedDatasets[0].FileName}</td>\n                        <td style={{ verticalAlign: 'middle' }}>{bindedDatasets[0].BriefInfo}</td>\n                        <td key={\"operateEachDataset\"}>\n                            <Container>\n                                <Row>\n                                    <ModelBriefInfo editModelDescription={props.editModelDescription}\n                                        modelName={bindedDatasets[0].FileName}\n                                        fetchModelFiles={props.fetchModelFiles} />\n\n                                    <Link to={`/visualisation/${bindedDatasets[0].FileName}`}>\n                                        <IconButton aria-label=\"visualisation\" component=\"span\">\n                                            <InsertChart />\n                                        </IconButton>\n                                    </Link>\n                                </Row>\n                            </Container>\n                        </td>\n                    </tr>\n                    {bindedDatasets.slice(1, bindedDatasets.length).map((dataset, index) =>\n                        <tr key={index}>\n                            <td style={{ verticalAlign: 'middle' }}>{dataset.FileName}</td>\n                            <td style={{ verticalAlign: 'middle' }}>{dataset.BriefInfo}</td>\n                            <td key={\"operateEachDataset\"}>\n                                <Container>\n                                    <Row>\n                                        <DeleteOneDataset deleteDataset={props.deleteDataset}\n                                            deletedFileName={dataset.FileName} />\n\n                                        <Link to={`/metadata-form/${dataset.FileName}`}>\n                                            <IconButton aria-label=\"create matadata\" component=\"span\">\n                                                <CreateIcon />\n                                            </IconButton>\n                                        </Link>\n                                    </Row>\n                                </Container>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            );\n        }\n    }\n\n    const renderModelTable = (bindedDatasets, isLoading) => {\n        console.log(\"check loading\", isLoading);\n        console.log(\"checked binded dataset: \", bindedDatasets);\n        if (isLoading) {\n            return (\n                <Loading />\n            );\n        } else {\n            return (\n                <Table hover size=\"sm\">\n                    {tableHead()}\n                    {tableBody(bindedDatasets)}\n                </Table>\n            );\n        }\n    }\n\n    useEffect(() => {\n        // fetch the existing metadata first\n        console.log(\"start refreshing binded datasets\", props.bindedDatasets);\n        props.getBindedDatasets(ModelName, sessionStorage.getItem('verifiedUsername'));\n    }, [props.bindedDatasets]);\n\n    return (\n        <Container>\n            <Row>\n                <Breadcrumb>\n                    <BreadcrumbItem><Link style={{color: \"grey\"}}to=\"/mymodels\">My Models</Link></BreadcrumbItem>\n                    <BreadcrumbItem active>Binded datasets of {ModelName}</BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"col-12\" style={{ paddingTop: '5%' }}>\n                    <h4 style={{color: \"grey\"}}>All binded datasets of {ModelName}</h4>\n                    <hr />\n                </div>\n            </Row>\n            <Row>\n                {renderModelTable(props.bindedDatasets, false)}\n            </Row>\n\n            {/**<Button onClick={toggleModal} style={{ backgroundColor: \"transparent\", border: 'none', color: \"black\" }}>{props.modelName}</Button>\n            <Button style={{ backgroundColor: \"transparent\", border: 'none', color: \"black\" }} onClick={toggleModal}>{props.modelName}</Button>\n\n            <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\n                <ModalHeader toggle={toggleModal}>Binded Datasets</ModalHeader>\n                <ModalBody style={{overflow: \"auto\"}}>\n                    {JSON.stringify(props.bindedDatasets)}\n                    {renderModelTable(props.bindedDatasets, false)}\n                </ModalBody>\n            </Modal>*/}\n        </Container>\n\n    );\n}\n\nexport default BindedDatasets;"]},"metadata":{},"sourceType":"module"}