{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/DatabaseComponent.js\";\nimport React, { Component } from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Table } from 'reactstrap';\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CreateIcon from '@material-ui/icons/Create';\nimport ModelBinding from './Modal/BindModel';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport { Link } from 'react-router-dom';\nimport DatasetUpload from './DatasetUploadComponent';\nimport DatasetUploading from './Modal/DatasetUploading';\nimport DeleteOneDataset from './DeleteOneDataset';\nimport DownloadFile from '../components/Modal/downloadFile';\nimport { Loading } from './LoadingComponent';\nimport MetadataForm from './MetadataForm';\nimport SearchFile from './searchFileComponent';\nimport SearchAllDatasets from './SearchAllDatasets';\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport { purple } from '@material-ui/core/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllDatasetSwitch = withStyles({\n  switchBase: {\n    color: '#FFF1CC',\n    '&$checked': {\n      color: '#FFD466'\n    },\n    '&$checked + $track': {\n      backgroundColor: '#FFD466'\n    }\n  },\n  checked: {},\n  track: {}\n})(Switch);\n\nclass Database extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShown: false,\n      checkAllDatasets: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState(state => ({ ...state,\n      [event.target.name]: event.target.checked\n    }));\n  }\n\n  compareDatasets(currentBindedDatasets, nextBindedDatasets) {\n    console.log(\"current: \", currentBindedDatasets);\n    console.log(\"next: \", nextBindedDatasets);\n\n    if (currentBindedDatasets.length !== nextBindedDatasets.length) {\n      return true;\n    } else {\n      const result = currentBindedDatasets.map((eachValue, index) => {\n        return Object.values(eachValue).map((eachAttr, attrIndex) => {\n          return eachAttr !== Object.values(nextBindedDatasets[index])[attrIndex] ? \"update\" : \"noUpdate\";\n        });\n      });\n      const result_final = result.map(eachResult => {\n        return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n      });\n      return result_final.includes(\"update\");\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.isQuery) {\n      this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\n    }\n  } // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\n  // dataset: array. JSON data stored inside.\n\n\n  tableHead(datasets) {\n    if (datasets !== undefined) {\n      return /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"10%\",\n            children: \"File name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"18%\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"8%\",\n            children: \"Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"14%\",\n            children: \"Operation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"The table for storing uploaded datasets does not exist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  } //TODO: may change if the design of the database is changed\n\n\n  tableBody(datasets) {\n    // when there is no uploaded dataset in the database\n    console.log(`dataset length: ${datasets.length}, dataset is ${datasets}`);\n\n    if (datasets.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this);\n    } else {\n      // where are dataset stored in the database\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: datasets.map((eachDataset, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.FileName\n          }, 'dataset name', false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.BriefInfo\n          }, 'dataset briefInfo', false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.Size\n          }, 'dataset size', false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.operateDataset(true, eachDataset.FileName, eachDataset.ModelName, eachDataset.UserName)\n          }, \"operateEachDataset\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this);\n    }\n  } //showOperate: bool. the delete button and the create button will be disable\n\n\n  operateDataset(showOperate, fileName, bindModelName, userName) {\n    if (showOperate) {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(DeleteOneDataset, {\n            deleteDataset: this.props.deleteDataset,\n            deletedFileName: fileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: `/metadata-form/${fileName}`,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"create matadata\",\n              component: \"span\",\n              children: /*#__PURE__*/_jsxDEV(CreateIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ModelBinding, {\n            modelFiles: this.props.modelFiles,\n            datasetName: fileName,\n            bindModel: this.props.bindModel,\n            bindedModelName: bindModelName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DownloadFile, {\n            downloadFile: this.props.downloadFile,\n            datasetName: fileName,\n            userName: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/alldataset/${fileName}?userName=${userName}&fileName=${fileName}`,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"detailed data\",\n              component: \"span\",\n              children: /*#__PURE__*/_jsxDEV(TableChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DownloadFile, {\n            downloadFile: this.props.downloadFile,\n            datasetName: fileName,\n            userName: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  renderDatasetTable(datasets, isLoading, errMess, isQuery) {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this);\n    } else if (errMess) {\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: errMess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this);\n    } else if (isQuery) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          hover: true,\n          style: {\n            tableLayout: 'fixed',\n            wordWrap: 'break-word'\n          },\n          children: [this.tableHead(datasets), this.tableBody(datasets)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#378CC6',\n            fontSize: '12px'\n          },\n          children: [\"Query result: \", datasets.length, \" datasets are found\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Table, {\n        hover: true,\n        style: {\n          tableLayout: 'fixed',\n          wordWrap: 'break-word'\n        },\n        children: [this.tableHead(datasets), this.tableBody(datasets)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  allTableHead(datasets) {\n    if (datasets !== undefined) {\n      return /*#__PURE__*/_jsxDEV(\"thead\", {\n        style: {\n          backgroundColor: '#FFE399',\n          color: \"black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"12%\",\n            children: \"File name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"20%\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"12%\",\n            children: \"User name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"8%\",\n            children: \"Operation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"The table for storing uploaded datasets does not exist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this);\n  }\n\n  allTableBody(datasets) {\n    // when there is no uploaded dataset in the database\n    if (datasets.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this);\n    } else {\n      // where are dataset stored in the database\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: datasets.map((eachDataset, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.FileName\n          }, 'name', false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.Description\n          }, 'Description', false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.UserName\n          }, 'Username', false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.operateDataset(false, eachDataset.FileName, eachDataset.UserName)\n          }, \"operateEachDataset\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  renderAllDatasetTable(datasets, isLoading, errMess, isQuery) {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this);\n    } else if (errMess) {\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: errMess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this);\n    } else if (isQuery) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          hover: true,\n          style: {\n            tableLayout: 'fixed',\n            wordWrap: 'break-word'\n          },\n          children: [this.allTableHead(datasets), this.allTableBody(datasets)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#378CC6',\n            fontSize: '12px'\n          },\n          children: [\"Query result: \", datasets.length, \" datasets are found\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Table, {\n        hover: true,\n        style: {\n          tableLayout: 'fixed',\n          wordWrap: 'break-word'\n        },\n        children: [this.allTableHead(datasets), this.allTableBody(datasets)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    console.log(\"switch state: \", this.state.checkAllDatasets);\n\n    if (this.state.checkAllDatasets) {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"search-box\",\n          children: /*#__PURE__*/_jsxDEV(SearchAllDatasets, {\n            queryDatasets: this.props.queryDatasets\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: \"9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: \"3\",\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(AllDatasetSwitch, {\n                    checked: this.state.checkAllDatasets,\n                    onChange: this.handleChange,\n                    color: \"primary\",\n                    name: \"checkAllDatasets\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 46\n                  }, this),\n                  label: \"All datasets\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"database\",\n          children: this.renderAllDatasetTable(this.props.allDatasetFiles, this.props.isAllLoading, this.props.allErrMess)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"search-box\",\n        children: /*#__PURE__*/_jsxDEV(SearchFile, {\n          queryDatasets: this.props.queryDatasets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            md: \"9\",\n            children: /*#__PURE__*/_jsxDEV(DatasetUploading, {\n              uploadDataset: this.props.uploadDataset,\n              fetchDatasetFiles: this.props.fetchDatasetFiles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: \"3\",\n            children: /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(AllDatasetSwitch, {\n                  checked: this.state.checkAllDatasets,\n                  onChange: this.handleChange,\n                  color: \"warning\",\n                  name: \"checkAllDatasets\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 46\n                }, this),\n                label: \"All datasets\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"database\",\n        children: this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess, this.props.isQuery)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Database;","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/DatabaseComponent.js"],"names":["React","Component","Card","CardBody","Container","Row","Col","Table","IconButton","Modal","TableRow","DeleteIcon","CreateIcon","ModelBinding","TableChartIcon","Link","DatasetUpload","DatasetUploading","DeleteOneDataset","DownloadFile","Loading","MetadataForm","SearchFile","SearchAllDatasets","Switch","FormGroup","FormControlLabel","withStyles","purple","AllDatasetSwitch","switchBase","color","backgroundColor","checked","track","Database","constructor","props","state","isShown","checkAllDatasets","handleChange","bind","event","setState","target","name","compareDatasets","currentBindedDatasets","nextBindedDatasets","console","log","length","result","map","eachValue","index","Object","values","eachAttr","attrIndex","result_final","eachResult","includes","componentDidUpdate","isQuery","fetchDatasetFiles","sessionStorage","getItem","tableHead","datasets","undefined","tableBody","eachDataset","FileName","BriefInfo","Size","operateDataset","ModelName","UserName","showOperate","fileName","bindModelName","userName","deleteDataset","modelFiles","bindModel","downloadFile","renderDatasetTable","isLoading","errMess","tableLayout","wordWrap","fontSize","allTableHead","allTableBody","Description","renderAllDatasetTable","render","queryDatasets","allDatasetFiles","isAllLoading","allErrMess","uploadDataset","datasetFiles"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Table } from 'reactstrap';\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CreateIcon from '@material-ui/icons/Create';\nimport ModelBinding from './Modal/BindModel';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport { Link } from 'react-router-dom';\n\nimport DatasetUpload from './DatasetUploadComponent';\nimport DatasetUploading from './Modal/DatasetUploading';\nimport DeleteOneDataset from './DeleteOneDataset';\nimport DownloadFile from '../components/Modal/downloadFile';\nimport { Loading } from './LoadingComponent';\nimport MetadataForm from './MetadataForm';\nimport SearchFile from './searchFileComponent';\nimport SearchAllDatasets from './SearchAllDatasets';\n\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport { purple } from '@material-ui/core/colors';\n\nconst AllDatasetSwitch = withStyles({\n    switchBase: {\n      color: '#FFF1CC',\n      '&$checked': {\n        color: '#FFD466',\n      },\n      '&$checked + $track': {\n        backgroundColor: '#FFD466',\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\nclass Database extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isShown: false,\n            checkAllDatasets: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState(state => ({ ...state, [event.target.name]: event.target.checked }));\n    }\n\n    compareDatasets(currentBindedDatasets, nextBindedDatasets){\n        console.log(\"current: \", currentBindedDatasets);\n        console.log(\"next: \", nextBindedDatasets)\n        if (currentBindedDatasets.length !== nextBindedDatasets.length) {\n            return true;\n        }\n        else {\n            const result = currentBindedDatasets.map((eachValue, index) => {\n                return Object.values(eachValue).map((eachAttr, attrIndex) => {\n                    return eachAttr !== Object.values(nextBindedDatasets[index])[attrIndex] ? \"update\" : \"noUpdate\";\n                })\n            });\n\n            const result_final = result.map(eachResult => {\n                return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n            });\n\n            return result_final.includes(\"update\");\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.isQuery) {\n            this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\n        } \n    }\n\n    // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\n    // dataset: array. JSON data stored inside.\n    tableHead(datasets) {\n        if (datasets !== undefined) {\n            return (\n                <thead>\n                    <tr>\n                        <th width=\"10%\">File name</th>\n                        <th width=\"18%\">Description</th>\n                        <th width=\"8%\">Size</th>\n                        <th width=\"14%\">Operation</th>\n                    </tr>\n                </thead>\n            );\n        }\n\n        return (\n            <div>The table for storing uploaded datasets does not exist</div>\n        );\n    }\n\n    //TODO: may change if the design of the database is changed\n    tableBody(datasets) {\n        // when there is no uploaded dataset in the database\n        console.log(`dataset length: ${datasets.length}, dataset is ${datasets}`)\n        if (datasets.length === 0) {\n            return (\n                <tbody />\n            );\n        }\n        else { // where are dataset stored in the database\n            return (\n                <tbody>\n                    {datasets.map((eachDataset, index) =>\n                        <tr key={index}>\n                            <td key={'dataset name'}>{eachDataset.FileName}</td>\n                            <td key={'dataset briefInfo'}>{eachDataset.BriefInfo}</td>\n                            <td key={'dataset size'}>{eachDataset.Size}</td>\n                            <td key={\"operateEachDataset\"}>{this.operateDataset(true, eachDataset.FileName, eachDataset.ModelName, eachDataset.UserName)}</td>\n                        </tr>\n                    )}\n                </tbody>\n            );\n        }\n\n    }\n\n    //showOperate: bool. the delete button and the create button will be disable\n    operateDataset(showOperate, fileName, bindModelName, userName) {\n        if (showOperate) {\n            return (\n                <Container>\n                    <Row>\n                        <DeleteOneDataset deleteDataset={this.props.deleteDataset}\n                            deletedFileName={fileName} />\n\n                        <Link to={`/metadata-form/${fileName}`}>\n                            <IconButton aria-label=\"create matadata\" component=\"span\">\n                                <CreateIcon/>\n                            </IconButton>\n                        </Link>\n\n                        <ModelBinding modelFiles={this.props.modelFiles} datasetName={fileName}\n                            bindModel={this.props.bindModel} bindedModelName={bindModelName}/>\n                        \n                        <DownloadFile downloadFile={this.props.downloadFile} datasetName={fileName} userName={userName}/>\n                    </Row>\n                </Container>\n            );\n        }\n        else {\n            return (\n                <Container>\n                    <Row>\n                        <Link to={`/alldataset/${fileName}?userName=${userName}&fileName=${fileName}`}>\n                            <IconButton aria-label=\"detailed data\" component=\"span\">\n                                <TableChartIcon />\n                            </IconButton>\n                        </Link>\n\n                        <DownloadFile downloadFile={this.props.downloadFile} datasetName={fileName} userName={userName} />\n                    </Row>\n                </Container>\n            );\n        }\n    }\n\n    renderDatasetTable(datasets, isLoading, errMess, isQuery) {\n        if (isLoading) {\n            return (\n                <Loading />\n            );\n        }\n        else if (errMess) {\n            return (\n                <h4>{errMess}</h4>\n            );\n        }\n        else if (isQuery) {\n            return (\n                <div>\n                    <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\n                        {this.tableHead(datasets)}\n                        {this.tableBody(datasets)}\n                    </Table>\n                    <p style={{ color: '#378CC6', fontSize: '12px' }}>Query result: {datasets.length} datasets are found</p>\n                </div>\n            );\n        }\n        else {\n            return (\n                <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\n                    {this.tableHead(datasets)}\n                    {this.tableBody(datasets)}\n                </Table>\n            );\n        }\n    }\n\n    allTableHead(datasets) {\n        if (datasets !== undefined) {\n            return (\n                <thead style={{ backgroundColor: '#FFE399', color: \"black\" }}>\n                    <tr>\n                        <th width=\"12%\">File name</th>\n                        <th width=\"20%\">Description</th>\n                        <th width=\"12%\">User name</th>\n                        <th width=\"8%\">Operation</th>\n                    </tr>\n                </thead>\n            );\n        }\n\n        return (\n            <div>The table for storing uploaded datasets does not exist</div>\n        );\n    }\n\n    allTableBody(datasets) {\n        // when there is no uploaded dataset in the database\n        if (datasets.length === 0) {\n            return (\n                <tbody />\n            );\n        }\n        else { // where are dataset stored in the database\n            return (\n                <tbody>\n                    {datasets.map((eachDataset, index) =>\n                        <tr key={index}>\n                            <td key={'name'}>{eachDataset.FileName}</td>\n                            <td key={'Description'}>{eachDataset.Description}</td>\n                            <td key={'Username'}>{eachDataset.UserName}</td>\n                            <td key={\"operateEachDataset\"}>{this.operateDataset(false, eachDataset.FileName, eachDataset.UserName)}</td>\n                        </tr>\n                    )}\n                </tbody>\n            );\n        }\n\n    }\n\n    renderAllDatasetTable(datasets, isLoading, errMess, isQuery) {\n        if (isLoading) {\n            return (\n                <Loading />\n            );\n        }\n        else if (errMess) {\n            return (\n                <h4>{errMess}</h4>\n            );\n        }\n        else if (isQuery) {\n            return (\n                <div>\n                    <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\n                        {this.allTableHead(datasets)}\n                        {this.allTableBody(datasets)}\n                    </Table>\n                    <p style={{ color: '#378CC6', fontSize: '12px' }}>Query result: {datasets.length} datasets are found</p>\n                </div>\n            );\n        }\n        else {\n            return (\n                <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\n                    {this.allTableHead(datasets)}\n                    {this.allTableBody(datasets)}\n                </Table>\n            );\n        }\n    }\n\n    render() {\n        console.log(\"switch state: \", this.state.checkAllDatasets)\n        if (this.state.checkAllDatasets){\n            return (\n                <Container>\n                  <Col className=\"search-box\" >\n                    <SearchAllDatasets queryDatasets={this.props.queryDatasets}/>\n                  </Col>\n\n                  <Col>\n                    <Row>\n                        <Col md=\"9\">\n                        </Col>\n                        <Col md=\"3\">\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={<AllDatasetSwitch checked={this.state.checkAllDatasets} onChange={this.handleChange} color=\"primary\" name=\"checkAllDatasets\" />}\n                                    label=\"All datasets\"\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </Col>\n          \n                  <Col className=\"database\">\n                    {this.renderAllDatasetTable(this.props.allDatasetFiles, this.props.isAllLoading, this.props.allErrMess)}\n                  </Col>\n                </Container>\n              );\n        }\n        return (\n            <Container>\n                <Col className=\"search-box\" >\n                    <SearchFile queryDatasets={this.props.queryDatasets} />\n                </Col>\n\n                <Col>\n                    <Row>\n                        <Col md=\"9\">\n                            <DatasetUploading uploadDataset={this.props.uploadDataset} fetchDatasetFiles={this.props.fetchDatasetFiles} />\n                        </Col>\n                        <Col md=\"3\">\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={<AllDatasetSwitch checked={this.state.checkAllDatasets} onChange={this.handleChange} color=\"warning\" name=\"checkAllDatasets\" />}\n                                    label=\"All datasets\"\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </Col>\n\n                <Col className=\"database\">\n                    {this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess, this.props.isQuery)}\n                </Col>\n            </Container>\n        );\n    }\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}