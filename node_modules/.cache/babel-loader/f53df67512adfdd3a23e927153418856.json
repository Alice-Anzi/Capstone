{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/ConnectionUploading.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Container, Progress, Card, CardBody, CardTitle, CardText, Button, CardColumns } from 'reactstrap';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport NeedUploading from './Modal/NeedUploading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ConnectionUploading(props) {\n  _s();\n\n  const MODEL_REMIND = \"Please upload your model. (only accept .cod)\";\n  const DATASET_REMIND = \"Please upload your datasets. (only accept .dat, .txt, .csv, .xlsx)\";\n  const [selectedModel, setSelectedModel] = useState(undefined);\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0);\n  const [modelMessage, setModelMessage] = useState(MODEL_REMIND);\n  const [message, setMessage] = useState(DATASET_REMIND);\n  const [fileInfo, setFileInfos] = useState(\"\");\n  const [isModalOpen, setModal] = useState(false);\n  const el = useRef(); // accesing input element\n\n  const validModalFormat = \"cod\";\n  const validDatasetFormat = [\"dat\", \"txt\", \"csv\", \"xlsx\"];\n  const [model_message, setModelFail] = useState(\"\");\n  const [dataset_message, setDatasetFail] = useState(\"\");\n\n  const checkValidation = (file, reminder, message, setFail) => {\n    let reader = new FileReader();\n    console.log(\"file name: \", file.name);\n\n    reader.onloadend = () => {\n      let lines = reader.result.split('\\n');\n\n      try {\n        let line_check = parseFloat(lines[0].split(' ')[0]);\n        message = Number.isNaN(line_check) ? `Could not upload ${file.name}.#` : `${file.name} uploaded successfully!#`;\n        reminder += message;\n        console.log(\"check reminder: \", reminder);\n        setFail(reminder);\n      } catch (e) {\n        message = `# Could not upload ${file.name}.#`;\n        reminder += message;\n        setFail(reminder);\n      }\n    };\n\n    reader.onerror = () => {\n      message = `# Could not upload ${file.name}.#`;\n      reminder += message;\n      setDatasetFail(reminder);\n    };\n\n    reader.readAsText(file);\n  }; // It is for get the uploaded file you selected\n\n\n  const handleModelChange = event => {\n    const file = event.target.files[0]; // accessing file\n\n    let modelMessage = '';\n    let message = '';\n    console.log(\"accepted model: \", file.name);\n\n    if (file.name !== null || file.name !== undefined || file.name.length !== 0) {\n      const acceptedModelArray = file.name.split(\".\");\n      const modelExtension = acceptedModelArray.slice(acceptedModelArray.length - 1, acceptedModelArray.length)[0];\n\n      if (modelExtension === validModalFormat) {\n        checkValidation(file, modelMessage, message, setModelFail);\n      } else {\n        setModelFail(\"Could not upload the model. Please check your model format or the content!\");\n      }\n\n      setSelectedModel(event.target.files[0]); // storing file\n      //setFileInfos(file.name)\n    }\n  };\n\n  const handleDatasetChange = event => {\n    const files = event.target.files; // accessing file\n\n    let datasetMessage = '';\n\n    for (let file of files) {\n      let message = '';\n      const acceptedDatasetArray = file.name.split(\".\");\n      const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n\n      if (validDatasetFormat.includes(datasetExtension)) {\n        let reader = new FileReader();\n        console.log(\"file name: \", file.name);\n\n        reader.onloadend = () => {\n          let lines = reader.result.split('\\n');\n          console.log(\"check lines: \", lines);\n\n          try {\n            if (datasetExtension === \"txt\" || datasetExtension == \"dat\") {\n              const firstRow = lines[0].trim().split(\" \");\n              console.log(\"first row: \", firstRow);\n              console.log(\"first row: \", firstRow.length);\n\n              if (firstRow.length === 1) {\n                console.log(\"firs row len 1\");\n                let line_check = parseFloat(firstRow[0]);\n                message = Number.isNaN(line_check) ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              } else {\n                console.log(\"firs row len not 1\");\n                message = `# Could not upload ${file.name}. `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              }\n            } else {\n              const firstRow = lines[0].trim().split(\" \");\n              const secondRow = lines[1].trim().split(\" \");\n\n              if (firstRow.length !== secondRow.length) {\n                message = `# Could not upload ${file.name}. `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              } else {\n                const checkLine = secondRow.slice(0, secondRow.length - 1).map(elem => Number.isNaN(parseFloat(elem)) ? \"noUpdate\" : \"update\");\n                message = checkLine.includes(\"noUpdate\") ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              }\n            }\n          } catch (e) {\n            message = `# Could not upload ${file.name}. `;\n            datasetMessage += message;\n            setDatasetFail(datasetMessage);\n          }\n        };\n\n        reader.onerror = () => {\n          message = `# Could not upload ${file.name}. `;\n          datasetMessage += message;\n          setDatasetFail(datasetMessage);\n        };\n\n        reader.readAsText(file);\n      } else {\n        message = `# Could not upload ${file.name}. `;\n        datasetMessage += message;\n        setDatasetFail(datasetMessage);\n      } // const acceptedDatasetArray = file.name.split(\".\");\n      // const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n      // let message = validDatasetFormat.includes(datasetExtension) ? `# ${file.name} uploaded successfully!  ` : `# Could not upload ${file.name}.  `;\n\n    }\n\n    setSelectedFiles(files); // storing file\n  }; // We use selectedFiles for accessing current File as the first Item. \n  // Then we call UploadService.upload() method on the currentFile with a callback.\n\n\n  const uploadModel = () => {\n    setProgress(0);\n    const formData = new FormData();\n    formData.append('username', selectedModel, sessionStorage.getItem('verifiedUsername'));\n    formData.append('model', selectedModel);\n\n    if (selectedFiles !== undefined) {\n      for (let i = 0; i < selectedFiles.length; i++) {\n        formData.append(`file${i}`, selectedFiles[i]); // appending file\n      }\n    } // Display the keys\n\n\n    for (var key of formData.keys()) {\n      console.log(key);\n    }\n\n    console.log(\"selected file:\", selectedFiles);\n    setCurrentFile(selectedFiles); // 'props.uploadModel' is from Redux actionCreators, which is used to post the uploaded model to the backend server\n\n    props.connectUploading(formData, event => {\n      setProgress(Math.round(100 * event.loaded / event.total));\n    }, sessionStorage.getItem('verifiedUsername')).then(() => console.log(\"I'm back\")).then(response => {\n      setModelMessage(\"Uploaded successfully\");\n      setMessage(\"Uploaded successfully\");\n      console.log(\"get connect names: \", props.connectionFiles);\n    }).catch(res => {\n      setProgress(0);\n      console.log(\"dataset\", dataset_message);\n      console.log(`model message: ${model_message}, dataset message: ${dataset_message}`);\n      setModelMessage(model_message);\n\n      if (model_message === \"Could not upload the model. Please check your model format or the content!\") {\n        setMessage(\"datasets are not allowed to be uploaded while model uploading fails\");\n      } else {\n        setMessage(dataset_message);\n      }\n    });\n  };\n\n  const handleUploadBtn = () => {\n    if (selectedModel == undefined) {\n      setModal(!isModalOpen);\n    } else {\n      uploadModel();\n    }\n  };\n\n  const toggleModal = () => {\n    setModal(!isModalOpen);\n  }; // while a user chooses not to delete a dataset\n\n\n  const handlenNoBtn = () => {\n    setModal(!isModalOpen);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentFile && /*#__PURE__*/_jsxDEV(Progress, {\n        animated: true,\n        value: progress,\n        max: \"100\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: \"9\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"file-upload\",\n              ref: el,\n              onChange: handleModelChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-light\",\n              role: \"alert\",\n              children: modelMessage.split(\"#\").map(eachMessage => /*#__PURE__*/_jsxDEV(\"p\", {\n                children: eachMessage.includes(\"successfully\") || eachMessage === MODEL_REMIND ? eachMessage : /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: eachMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 126\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: \"#378CC6\"\n          },\n          disabled: !selectedModel,\n          onClick: handleUploadBtn,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: \"5\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              multiple: true,\n              ref: el,\n              onChange: handleDatasetChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-light\",\n              role: \"alert\",\n              children: message.split(\"#\").map(eachMessage => /*#__PURE__*/_jsxDEV(\"p\", {\n                children: eachMessage.includes(\"successfully\") || eachMessage === DATASET_REMIND ? eachMessage : /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: eachMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 128\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        toggle: toggleModal,\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: toggleModal,\n          children: \"Dataset Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You have not selected any model. Please select one before uploading !\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleUploadBtn,\n                children: \"Got it!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardBody, {\n        children: /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"center\",\n            children: \"Last Uploading History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"grey\",\n              fontSize: \"small\"\n            },\n            children: \"Notice: the file name will be automatically modified if there is a file with the same name in your database\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"uploaded Model\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardText, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: /*#__PURE__*/_jsxDEV(ListGroupItem, {\n              className: \"justify-content-between\",\n              children: props.connectionFiles[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardTitle, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"uploaded Datasets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardText, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            children: props.connectionFiles[1].map((filename, index) => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n              className: \"justify-content-between\",\n              children: filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ConnectionUploading, \"9DBaTVTg27fLX3CfGeP8k0G8v/8=\");\n\n_c = ConnectionUploading;\nexport default ConnectionUploading;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectionUploading\");","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/ConnectionUploading.js"],"names":["React","useState","useEffect","useRef","Row","Col","Container","Progress","Card","CardBody","CardTitle","CardText","Button","CardColumns","Modal","ModalHeader","ModalBody","ListGroup","ListGroupItem","PublishIcon","NeedUploading","ConnectionUploading","props","MODEL_REMIND","DATASET_REMIND","selectedModel","setSelectedModel","undefined","selectedFiles","setSelectedFiles","currentFile","setCurrentFile","progress","setProgress","modelMessage","setModelMessage","message","setMessage","fileInfo","setFileInfos","isModalOpen","setModal","el","validModalFormat","validDatasetFormat","model_message","setModelFail","dataset_message","setDatasetFail","checkValidation","file","reminder","setFail","reader","FileReader","console","log","name","onloadend","lines","result","split","line_check","parseFloat","Number","isNaN","e","onerror","readAsText","handleModelChange","event","target","files","length","acceptedModelArray","modelExtension","slice","handleDatasetChange","datasetMessage","acceptedDatasetArray","datasetExtension","includes","firstRow","trim","secondRow","checkLine","map","elem","uploadModel","formData","FormData","append","sessionStorage","getItem","i","key","keys","connectUploading","Math","round","loaded","total","then","response","connectionFiles","catch","res","handleUploadBtn","toggleModal","handlenNoBtn","eachMessage","color","backgroundColor","fontSize","filename","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Row, Col, Container, Progress, Card, CardBody, CardTitle, CardText, Button, CardColumns } from 'reactstrap';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport NeedUploading from './Modal/NeedUploading';\n\nfunction ConnectionUploading(props) {\n    const MODEL_REMIND = \"Please upload your model. (only accept .cod)\";\n    const DATASET_REMIND = \"Please upload your datasets. (only accept .dat, .txt, .csv, .xlsx)\";\n    const [selectedModel, setSelectedModel] = useState(undefined);\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\n    const [currentFile, setCurrentFile] = useState(undefined);\n    const [progress, setProgress] = useState(0);\n    const [modelMessage, setModelMessage] = useState(MODEL_REMIND);\n    const [message, setMessage] = useState(DATASET_REMIND);\n\n    const [fileInfo, setFileInfos] = useState(\"\");\n    const [isModalOpen, setModal] = useState(false);\n\n    const el = useRef(); // accesing input element\n\n    const validModalFormat = \"cod\";\n    const validDatasetFormat = [\"dat\", \"txt\", \"csv\", \"xlsx\"];\n    const [model_message, setModelFail] = useState(\"\");\n    const [dataset_message, setDatasetFail] = useState(\"\");\n\n    const checkValidation = (file, reminder, message, setFail) => {\n        let reader = new FileReader();\n        console.log(\"file name: \", file.name);\n        reader.onloadend = () => {\n            let lines = reader.result.split('\\n');\n            try {\n                let line_check = parseFloat(lines[0].split(' ')[0]);\n                message = Number.isNaN(line_check) ? `Could not upload ${file.name}.#` : `${file.name} uploaded successfully!#`;\n                reminder += message;\n                console.log(\"check reminder: \", reminder);\n                setFail(reminder);\n            }\n            catch (e) {\n                message = `# Could not upload ${file.name}.#`;\n                reminder += message;\n                setFail(reminder);\n            }\n        };\n\n        reader.onerror = () => {\n            message = `# Could not upload ${file.name}.#`;\n            reminder += message;\n            setDatasetFail(reminder);\n        };\n\n        reader.readAsText(file);\n    };\n\n    // It is for get the uploaded file you selected\n    const handleModelChange = (event) => {\n        const file = event.target.files[0]; // accessing file\n        let modelMessage = '';\n        let message = '';\n        console.log(\"accepted model: \", file.name);\n        if (file.name !== null || file.name !== undefined || file.name.length !== 0) {\n            const acceptedModelArray = file.name.split(\".\");\n            const modelExtension = acceptedModelArray.slice(acceptedModelArray.length - 1, acceptedModelArray.length)[0]\n            if (modelExtension === validModalFormat) {\n                checkValidation(file, modelMessage, message, setModelFail);\n            } else {\n                setModelFail(\"Could not upload the model. Please check your model format or the content!\");\n            }\n            setSelectedModel(event.target.files[0]); // storing file\n            //setFileInfos(file.name)\n        }\n    }\n\n    const handleDatasetChange = (event) => {\n        const files = event.target.files; // accessing file\n        let datasetMessage = '';\n\n        for (let file of files) {\n            let message = '';\n\n            const acceptedDatasetArray = file.name.split(\".\");\n            const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n            if (validDatasetFormat.includes(datasetExtension)) {\n                let reader = new FileReader();\n                console.log(\"file name: \", file.name);\n                reader.onloadend = () => {\n                    let lines = reader.result.split('\\n');\n                    console.log(\"check lines: \", lines);\n                    try {\n\n                        if (datasetExtension === \"txt\" || datasetExtension == \"dat\") {\n                            const firstRow = lines[0].trim().split(\" \");\n                            console.log(\"first row: \", firstRow);\n                            console.log(\"first row: \", firstRow.length);\n\n                            if (firstRow.length === 1) {\n                                console.log(\"firs row len 1\");\n                                let line_check = parseFloat(firstRow[0]);\n                                message = Number.isNaN(line_check) ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                            else {\n                                console.log(\"firs row len not 1\");\n                                message = `# Could not upload ${file.name}. `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                        }\n                        else {\n                            const firstRow = lines[0].trim().split(\" \");\n                            const secondRow = lines[1].trim().split(\" \");\n\n                            if (firstRow.length !== secondRow.length) {\n                                message = `# Could not upload ${file.name}. `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                            else {\n                                const checkLine = secondRow.slice(0, secondRow.length - 1).map(elem => Number.isNaN(parseFloat(elem)) ? \"noUpdate\" : \"update\");\n                                message = checkLine.includes(\"noUpdate\") ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                        }\n\n\n                    }\n                    catch (e) {\n                        message = `# Could not upload ${file.name}. `;\n                        datasetMessage += message;\n                        setDatasetFail(datasetMessage);\n                    }\n                };\n\n                reader.onerror = () => {\n                    message = `# Could not upload ${file.name}. `;\n                    datasetMessage += message;\n                    setDatasetFail(datasetMessage);\n                };\n\n                reader.readAsText(file);\n            }\n            else {\n                message = `# Could not upload ${file.name}. `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n            }\n\n            // const acceptedDatasetArray = file.name.split(\".\");\n            // const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n            // let message = validDatasetFormat.includes(datasetExtension) ? `# ${file.name} uploaded successfully!  ` : `# Could not upload ${file.name}.  `;\n\n        }\n        setSelectedFiles(files); // storing file\n    }\n\n    // We use selectedFiles for accessing current File as the first Item. \n    // Then we call UploadService.upload() method on the currentFile with a callback.\n    const uploadModel = () => {\n        setProgress(0);\n\n        const formData = new FormData();\n\n        formData.append('username', selectedModel, sessionStorage.getItem('verifiedUsername'));\n        formData.append('model', selectedModel);\n\n        if (selectedFiles !== undefined) {\n            for (let i = 0; i < selectedFiles.length; i++) {\n                formData.append(`file${i}`, selectedFiles[i]); // appending file\n            }\n        }\n\n        // Display the keys\n        for (var key of formData.keys()) {\n            console.log(key);\n        }\n\n        console.log(\"selected file:\", selectedFiles);\n        setCurrentFile(selectedFiles);\n\n        // 'props.uploadModel' is from Redux actionCreators, which is used to post the uploaded model to the backend server\n        props.connectUploading(formData, (event) => {\n            setProgress(Math.round((100 * event.loaded) / event.total));\n        }, sessionStorage.getItem('verifiedUsername'))\n            .then(() => console.log(\"I'm back\"))\n            .then((response) => {\n                setModelMessage(\"Uploaded successfully\");\n                setMessage(\"Uploaded successfully\");\n                console.log(\"get connect names: \", props.connectionFiles);\n            })\n            .catch((res) => {\n                setProgress(0);\n                console.log(\"dataset\", dataset_message);\n                console.log(`model message: ${model_message}, dataset message: ${dataset_message}`)\n                setModelMessage(model_message);\n                if (model_message === \"Could not upload the model. Please check your model format or the content!\") {\n                    setMessage(\"datasets are not allowed to be uploaded while model uploading fails\");\n                } else {\n                    setMessage(dataset_message);\n                }\n            });\n    };\n\n    const handleUploadBtn = () => {\n        if (selectedModel == undefined) {\n            setModal(!isModalOpen);\n        }\n        else {\n            uploadModel();\n        }\n    }\n\n    const toggleModal = () => {\n        setModal(!isModalOpen);\n    };\n\n    // while a user chooses not to delete a dataset\n    const handlenNoBtn = () => {\n        setModal(!isModalOpen);\n    };\n\n    return (\n        <Container>\n\n            <div>\n                {currentFile && (<Progress animated value={progress} max=\"100\">{progress}%</Progress>)}\n            </div>\n\n            <Row>\n                <Col md=\"9\">\n                    <Row>\n                        <label htmlFor=\"file-upload\">\n                            <input type=\"file\" id=\"file-upload\" ref={el} onChange={handleModelChange} />\n                            <div className=\"alert alert-light\" role=\"alert\">\n                                {modelMessage.split(\"#\").map(eachMessage =>\n                                    <p>{eachMessage.includes(\"successfully\") || eachMessage === MODEL_REMIND ? eachMessage : <div style={{ color: 'red' }}>{eachMessage}</div>}</p>\n                                )}\n                            </div>\n                        </label>\n                    </Row>\n                </Col>\n\n                <Col>\n                    <Button\n                        style={{ backgroundColor: \"#378CC6\" }}\n                        disabled={!selectedModel}\n                        onClick={handleUploadBtn}>\n                        Upload\n                    </Button>\n                </Col>\n\n            </Row>\n\n            {/** datasets */}\n            <Row>\n                <Col md=\"5\">\n                    <Row>\n                        <label htmlFor=\"file-upload\">\n                            <input type=\"file\" multiple ref={el} onChange={handleDatasetChange} />\n                            <div className=\"alert alert-light\" role=\"alert\">\n                                {message.split(\"#\").map(eachMessage =>\n                                    <p>{eachMessage.includes(\"successfully\") || eachMessage === DATASET_REMIND ? eachMessage : <div style={{ color: 'red' }}>{eachMessage}</div>}</p>\n                                )}\n                            </div>\n                        </label>\n                    </Row>\n                </Col>\n\n                <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\n                    <ModalHeader toggle={toggleModal}>Dataset Delete</ModalHeader>\n                    <ModalBody>\n                        <p>You have not selected any model. Please select one before uploading !</p>\n                        <Row>\n                            <Col>\n                                <Button onClick={handleUploadBtn}>Got it!</Button>\n                            </Col>\n                        </Row>\n                    </ModalBody>\n                </Modal>\n            </Row>\n\n            <Card>\n                <CardBody>\n                    <CardTitle>\n                        <h5 className=\"center\">Last Uploading History</h5>\n                        <p style={{ color: \"grey\", fontSize: \"small\" }}>Notice: the file name will be automatically modified if there is a file with the same name in your database</p>\n                    </CardTitle>\n                </CardBody>\n                <CardBody>\n                    <CardTitle><strong>uploaded Model</strong></CardTitle>\n                    <CardText>\n                        <ListGroup>\n                            <ListGroupItem className=\"justify-content-between\">{props.connectionFiles[0]}</ListGroupItem>\n                        </ListGroup>\n                    </CardText>\n\n                    <CardTitle><strong>uploaded Datasets</strong></CardTitle>\n                    <CardText>\n                        <ListGroup>\n                            {props.connectionFiles[1].map((filename, index) => (\n                                <ListGroupItem className=\"justify-content-between\">{filename}</ListGroupItem>\n                            ))}\n                        </ListGroup>\n                    </CardText>\n                </CardBody>\n            </Card>\n        </Container>\n    );\n\n}\n\nexport default ConnectionUploading;"]},"metadata":{},"sourceType":"module"}