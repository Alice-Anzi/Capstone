{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/MainComponent.js\";\nimport React, { PureComponent, Component, useCallback } from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col } from 'reactstrap';\nimport { actions } from 'react-redux-form';\nimport Sidebar from './SidebarComponent';\nimport Database from './DatabaseComponent';\nimport Visualisation from './VisualisationComponent';\nimport SOMModel from './ModelComponent';\nimport DetailedDataset from './DetailedDatasetComponent';\nimport MetadataForm from './MetadataForm';\nimport ConnectionUploading from './ConnectionUploading';\nimport BindedDatasets from './Modal/BindedDatasets';\nimport AllDataset from './AlldatasetsComponent';\nimport AllModel from './AllModelsComponents';\nimport compareProps from '../others/compareProps';\nimport { fetchDatasetFiles, uploadDataset, fetchUploadedDataset, submitMetadata, deleteOneDataset, queryDatasets, fetchModelFiles, uploadModel, fetchUploadedModel, deleteOneModel, editModelDescription, sendNameForDetailedData, connectUploading, clearConnectionFiles, bindModel, queryModels, getBindedDatasets, deleteOneBindedDataset, downloadFile, fetchAllDatasetFiles, queryAllDatasets, fetchAllModels } from '../redux/ActionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    metadata: state.metadata,\n    datasetFiles: state.datasetFiles,\n    modelFiles: state.modelFiles,\n    detailedData: state.detailedData,\n    allDatasetFiles: state.allDatasetFiles,\n    allModels: state.allModels,\n    connectionFiles: state.connectionFiles\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  connectUploading: (files, onUploadProgress, username) => dispatch(connectUploading(files, onUploadProgress, username)),\n  clearConnectionFiles: () => dispatch(clearConnectionFiles()),\n  bindModel: (modelname, username, datasetname) => dispatch(bindModel(modelname, username, datasetname)),\n  getBindedDatasets: (modelname, username) => dispatch(getBindedDatasets(modelname, username)),\n  deleteOneBindedDataset: (datasetName, userName) => {\n    dispatch(deleteOneBindedDataset(datasetName, userName));\n  },\n  fetchDatasetFiles: userName => {\n    dispatch(fetchDatasetFiles(userName));\n  },\n  uploadDataset: (dataset, onUploadProgress, username) => dispatch(uploadDataset(dataset, onUploadProgress, username)),\n  fetchUploadedDataset: username => {\n    dispatch(fetchUploadedDataset(username));\n  },\n  deleteDataset: (datasetName, userName) => {\n    dispatch(deleteOneDataset(datasetName, userName));\n  },\n  queryDatasets: (inputValue, userName) => {\n    dispatch(queryDatasets(inputValue, userName));\n  },\n  downloadFile: (datasetName, downloadName, downloadType, username) => {\n    dispatch(downloadFile(datasetName, downloadName, downloadType, username));\n  },\n  fetchModelFiles: (userName, isLoading) => {\n    dispatch(fetchModelFiles(userName, isLoading));\n  },\n  uploadModel: (model, onUploadProgress, username) => dispatch(uploadModel(model, onUploadProgress, username)),\n  fetchUploadedModel: username => {\n    dispatch(fetchUploadedModel(username));\n  },\n  deleteModel: (name, userName) => {\n    dispatch(deleteOneModel(name, userName));\n  },\n  editModelDescription: (name, description, username) => {\n    dispatch(editModelDescription(name, description, username));\n  },\n  queryModels: (inputValue, userName) => {\n    dispatch(queryModels(inputValue, userName));\n  },\n  fetchAllDatasetFiles: () => {\n    dispatch(fetchAllDatasetFiles());\n  },\n  queryAllDatasets: inputValue => {\n    dispatch(queryAllDatasets(inputValue));\n  },\n  fetchAllModels: () => {\n    dispatch(fetchAllModels());\n  },\n  submitMetadata: metadata => {\n    dispatch(submitMetadata(metadata));\n  },\n  sendNameForDetailedData: (datasetName, userName) => {\n    dispatch(sendNameForDetailedData(datasetName, userName));\n  }\n});\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedDataset: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchModelFiles(sessionStorage.getItem('verifiedUsername'));\n    this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\n    this.props.fetchAllDatasetFiles();\n    this.props.fetchAllModels();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"start should\"); // if the metadata itself needs to be updated, return true\n    //console.log(\"compareMetadata: \", this.props.metadata.metadata);\n    //console.log(\"nextMetadata: \", nextProps.metadata.metadata);\n\n    const compareBindedDatasets = (currentBindedDatasets, nextBindedDatasets) => {\n      //console.log(\"current: \", currentBindedDatasets);\n      //console.log(\"next: \", nextBindedDatasets)\n      if (currentBindedDatasets.length !== nextBindedDatasets.length) {\n        return true;\n      } else {\n        const result = currentBindedDatasets.map((eachValue, index) => {\n          return Object.values(eachValue).map((eachAttr, attrIndex) => {\n            return eachAttr !== Object.values(nextBindedDatasets[index])[attrIndex] ? \"update\" : \"noUpdate\";\n          });\n        });\n        const result_final = result.map(eachResult => {\n          return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n        });\n        return result_final.includes(\"update\");\n      }\n    };\n\n    if (compareProps(this.props.metadata.metadata[0], nextProps.metadata.metadata[0], this.props.modelFiles.modelFiles, nextProps.modelFiles.modelFiles)) {\n      console.log(\"because of metadata\");\n      return true;\n    } else {\n      if (compareBindedDatasets(this.props.datasetFiles.datasetFiles, nextProps.datasetFiles.datasetFiles)) {\n        console.log(\"because of dataset files\");\n        return true;\n      } else if (this.props.connectionFiles.connectionFiles[0] !== nextProps.connectionFiles.connectionFiles[0]) {\n        console.log(\"because of connection files\");\n        return true;\n      } else if (compareBindedDatasets(this.props.connectionFiles.bindedDatasets, nextProps.connectionFiles.bindedDatasets)) {\n        console.log(\"because of binded datasets\");\n        return true;\n      } else {\n        console.log(\"not update\");\n        return false;\n      }\n    }\n  }\n\n  render() {\n    const DatasetWithName = ({\n      match\n    }) => {\n      let selectedDataset = this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0] == undefined ? localStorage.getItem('datasetname-detaileddata') : this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0].FileName; //localStorage.setItem('datasetname-detaileddata', selectedDataset);\n      //console.log(\"detaileddata for name: \", selectedDataset);\n\n      return /*#__PURE__*/_jsxDEV(DetailedDataset, {\n        selectedDataset: this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0],\n        sendNameForDetailedData: this.props.sendNameForDetailedData,\n        detailedData: this.props.detailedData.detailedData,\n        isLoading_detailedData: this.props.detailedData.isLoading,\n        errMess_detailedData: this.props.detailedData.errMess,\n        metadata: this.props.metadata.metadata[0],\n        isLoading_metadata: this.props.metadata.isLoading,\n        errMess_metadata: this.props.metadata.errMess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this);\n    };\n\n    const DatasetSelect = ({\n      match\n    }) => {\n      let datasetName = this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0] == undefined ? localStorage.getItem('datasetname-metadata') : this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0].FileName;\n      console.log(\"dataset name: \", datasetName);\n      localStorage.setItem('datasetname-metadata', datasetName);\n      return /*#__PURE__*/_jsxDEV(MetadataForm, {\n        dataset: this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0],\n        submitMetadata: this.props.submitMetadata,\n        fetchDatasetFiles: this.props.fetchDatasetFiles,\n        sendNameForDetailedData: this.props.sendNameForDetailedData,\n        detailedData: this.props.detailedData.detailedData,\n        isLoading_detailedData: this.props.detailedData.isLoading,\n        errMess_detailedData: this.props.detailedData.errMess,\n        metadata: this.props.metadata.metadata[0],\n        isLoading_metadata: this.props.metadata.isLoading,\n        errMess_metadata: this.props.metadata.errMess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this);\n    };\n\n    const ModelSelect = ({\n      match\n    }) => {\n      let modelName = this.props.modelFiles.modelFiles.filter(model => model.FileName === match.params.modelName)[0] == undefined ? localStorage.getItem('modelname') : this.props.modelFiles.modelFiles.filter(model => model.FileName === match.params.modelName)[0].FileName;\n      console.log(\"model name: \", modelName);\n      localStorage.setItem('modelname', modelName);\n      return /*#__PURE__*/_jsxDEV(BindedDatasets, {\n        modelName: this.props.modelFiles.modelFiles.filter(model => model.FileName === match.params.modelName)[0],\n        getBindedDatasets: this.props.getBindedDatasets,\n        isBindLoading: this.props.isBindLoading,\n        bindedDatasets: this.props.connectionFiles.bindedDatasets,\n        isBindLoading: this.props.connectionFiles.isLoading,\n        deleteDataset: this.props.deleteOneBindedDataset,\n        editModelDescription: this.props.editModelDescription,\n        fetchModelFiles: this.props.fetchModelFiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"sidebar\",\n        md: \"3\",\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {\n          username: this.props.user.userInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"main-page\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/uploading\",\n            component: () => /*#__PURE__*/_jsxDEV(ConnectionUploading, {\n              connectUploading: this.props.connectUploading,\n              connectionFiles: this.props.connectionFiles.connectionFiles,\n              uploadingStatus: this.props.connectionFiles.uploadingStatus,\n              clearConnectionFiles: this.props.clearConnectionFiles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/mydatabase\",\n            component: () => /*#__PURE__*/_jsxDEV(Database, {\n              datasetFiles: this.props.datasetFiles.datasetFiles,\n              isLoading: this.props.datasetFiles.isLoading,\n              isQuery: this.props.datasetFiles.isQuery,\n              errMess: this.props.datasetFiles.errMess,\n              uploadDataset: this.props.uploadDataset,\n              fetchUploadedDataset: this.props.fetchUploadedDataset,\n              deleteDataset: this.props.deleteDataset,\n              fetchDatasetFiles: this.props.fetchDatasetFiles,\n              queryDatasets: this.props.queryDatasets,\n              modelFiles: this.props.modelFiles.modelFiles,\n              bindModel: this.props.bindModel,\n              downloadFile: this.props.downloadFile,\n              allDatasetFiles: this.props.allDatasetFiles.datasetFiles,\n              isAllLoading: this.props.allDatasetFiles.isLoading,\n              allErrMess: this.props.allDatasetFiles.errMess,\n              fetchAllDatasetFiles: this.props.fetchAllDatasetFiles,\n              queryAllDatasets: this.props.queryAllDatasets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/alldataset/:datasetName\",\n            component: DatasetWithName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/metadata-form/:datasetName\",\n            component: DatasetSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/mymodels/:modelName\",\n            component: ModelSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/mymodels\",\n            component: () => /*#__PURE__*/_jsxDEV(SOMModel, {\n              modelFiles: this.props.modelFiles.modelFiles,\n              isLoading: this.props.modelFiles.isLoading,\n              errMess: this.props.modelFiles.errMess,\n              uploadModel: this.props.uploadModel,\n              fetchUploadedModel: this.props.fetchUploadedModel,\n              deleteModel: this.props.deleteModel,\n              editModelDescription: this.props.editModelDescription,\n              fetchModelFiles: this.props.fetchModelFiles,\n              fetchDatasetFiles: this.props.fetchDatasetFiles,\n              connectUploading: this.props.connectUploading,\n              connectionFiles: this.props.connectionFiles.connectionFiles,\n              clearConnectionFiles: this.props.clearConnectionFiles,\n              bindedDatasets: this.props.connectionFiles.bindedDatasets,\n              getBindedDatasets: this.props.getBindedDatasets,\n              queryModels: this.props.queryModels,\n              isBindLoading: this.props.connectionFiles.isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/visualisation\",\n            component: Visualisation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/allmodels\",\n            component: () => /*#__PURE__*/_jsxDEV(AllModel, {\n              fetchAllModels: this.props.fetchAllModels,\n              allModels: this.props.allModels.modelFiles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/alldataset\",\n            component: () => /*#__PURE__*/_jsxDEV(AllDataset, {\n              datasetFiles: this.props.allDatasetFiles.datasetFiles,\n              isLoading: this.props.allDatasetFiles.isLoading,\n              errMess: this.props.allDatasetFiles.errMess,\n              fetchDatasetFiles: this.props.fetchAllDatasetFiles,\n              queryDatasets: this.props.queryAllDatasets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/mymodels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/MainComponent.js"],"names":["React","PureComponent","Component","useCallback","Switch","Route","Redirect","withRouter","connect","Container","Row","Col","actions","Sidebar","Database","Visualisation","SOMModel","DetailedDataset","MetadataForm","ConnectionUploading","BindedDatasets","AllDataset","AllModel","compareProps","fetchDatasetFiles","uploadDataset","fetchUploadedDataset","submitMetadata","deleteOneDataset","queryDatasets","fetchModelFiles","uploadModel","fetchUploadedModel","deleteOneModel","editModelDescription","sendNameForDetailedData","connectUploading","clearConnectionFiles","bindModel","queryModels","getBindedDatasets","deleteOneBindedDataset","downloadFile","fetchAllDatasetFiles","queryAllDatasets","fetchAllModels","mapStateToProps","state","user","metadata","datasetFiles","modelFiles","detailedData","allDatasetFiles","allModels","connectionFiles","mapDispatchToProps","dispatch","files","onUploadProgress","username","modelname","datasetname","datasetName","userName","dataset","deleteDataset","inputValue","downloadName","downloadType","isLoading","model","deleteModel","name","description","Main","constructor","props","selectedDataset","componentDidMount","sessionStorage","getItem","shouldComponentUpdate","nextProps","nextState","console","log","compareBindedDatasets","currentBindedDatasets","nextBindedDatasets","length","result","map","eachValue","index","Object","values","eachAttr","attrIndex","result_final","eachResult","includes","bindedDatasets","render","DatasetWithName","match","filter","FileName","params","undefined","localStorage","errMess","DatasetSelect","setItem","ModelSelect","modelName","isBindLoading","userInfo","uploadingStatus","isQuery"],"mappings":"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","sourcesContent":["import React, { PureComponent, Component, useCallback } from 'react';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { actions } from 'react-redux-form';\r\nimport Sidebar from './SidebarComponent';\r\nimport Database from './DatabaseComponent';\r\nimport Visualisation from './VisualisationComponent';\r\nimport SOMModel from './ModelComponent';\r\nimport DetailedDataset from './DetailedDatasetComponent';\r\nimport MetadataForm from './MetadataForm';\r\nimport ConnectionUploading from './ConnectionUploading';\r\nimport BindedDatasets from './Modal/BindedDatasets';\r\nimport AllDataset from './AlldatasetsComponent';\r\nimport AllModel from './AllModelsComponents';\r\nimport compareProps from '../others/compareProps';\r\n\r\nimport {\r\n    fetchDatasetFiles, uploadDataset, fetchUploadedDataset, submitMetadata, deleteOneDataset, queryDatasets,\r\n    fetchModelFiles, uploadModel, fetchUploadedModel, deleteOneModel, editModelDescription,\r\n    sendNameForDetailedData, connectUploading, clearConnectionFiles, bindModel, queryModels, getBindedDatasets,\r\n    deleteOneBindedDataset, downloadFile,\r\n    fetchAllDatasetFiles, queryAllDatasets, fetchAllModels\r\n} from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        metadata: state.metadata,\r\n        datasetFiles: state.datasetFiles,\r\n        modelFiles: state.modelFiles,\r\n        detailedData: state.detailedData,\r\n        allDatasetFiles: state.allDatasetFiles,\r\n        allModels: state.allModels,\r\n        connectionFiles: state.connectionFiles\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    connectUploading: (files, onUploadProgress, username) => dispatch(connectUploading(files, onUploadProgress, username)),\r\n    clearConnectionFiles: () => dispatch(clearConnectionFiles()),\r\n    bindModel: (modelname, username, datasetname) => dispatch(bindModel(modelname, username, datasetname)),\r\n    getBindedDatasets: (modelname, username) => dispatch(getBindedDatasets(modelname, username)),\r\n    deleteOneBindedDataset: (datasetName, userName) => { dispatch(deleteOneBindedDataset(datasetName, userName)) },\r\n\r\n    fetchDatasetFiles: (userName) => { dispatch(fetchDatasetFiles(userName)) },\r\n    uploadDataset: (dataset, onUploadProgress, username) => dispatch(uploadDataset(dataset, onUploadProgress, username)),\r\n    fetchUploadedDataset: (username) => { dispatch(fetchUploadedDataset(username)) },\r\n    deleteDataset: (datasetName, userName) => { dispatch(deleteOneDataset(datasetName, userName)) },\r\n    queryDatasets: (inputValue, userName) => { dispatch(queryDatasets(inputValue, userName)) },\r\n\r\n    downloadFile: (datasetName, downloadName, downloadType, username) => { dispatch(downloadFile(datasetName, downloadName, downloadType, username)) },\r\n\r\n    fetchModelFiles: (userName, isLoading) => { dispatch(fetchModelFiles(userName, isLoading)) },\r\n    uploadModel: (model, onUploadProgress, username) => dispatch(uploadModel(model, onUploadProgress, username)),\r\n    fetchUploadedModel: (username) => { dispatch(fetchUploadedModel(username)) },\r\n    deleteModel: (name, userName) => { dispatch(deleteOneModel(name, userName)) },\r\n    editModelDescription: (name, description, username) => { dispatch(editModelDescription(name, description, username)) },\r\n    queryModels: (inputValue, userName) => { dispatch(queryModels(inputValue, userName)) },\r\n\r\n    fetchAllDatasetFiles: () => { dispatch(fetchAllDatasetFiles()) },\r\n    queryAllDatasets: (inputValue) => { dispatch(queryAllDatasets(inputValue)) },\r\n\r\n    fetchAllModels: () => { dispatch(fetchAllModels()) },\r\n\r\n    submitMetadata: (metadata) => { dispatch(submitMetadata(metadata)) },\r\n    sendNameForDetailedData: (datasetName, userName) => { dispatch(sendNameForDetailedData(datasetName, userName)) }\r\n});\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedDataset: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchModelFiles(sessionStorage.getItem('verifiedUsername'));\r\n        this.props.fetchDatasetFiles(sessionStorage.getItem('verifiedUsername'));\r\n        this.props.fetchAllDatasetFiles();\r\n        this.props.fetchAllModels();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"start should\");\r\n        // if the metadata itself needs to be updated, return true\r\n        //console.log(\"compareMetadata: \", this.props.metadata.metadata);\r\n        //console.log(\"nextMetadata: \", nextProps.metadata.metadata);\r\n\r\n        const compareBindedDatasets = (currentBindedDatasets, nextBindedDatasets) => {\r\n            //console.log(\"current: \", currentBindedDatasets);\r\n            //console.log(\"next: \", nextBindedDatasets)\r\n            if (currentBindedDatasets.length !== nextBindedDatasets.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                const result = currentBindedDatasets.map((eachValue, index) => {\r\n                    return Object.values(eachValue).map((eachAttr, attrIndex) => {\r\n                        return eachAttr !== Object.values(nextBindedDatasets[index])[attrIndex] ? \"update\" : \"noUpdate\";\r\n                    })\r\n                });\r\n\r\n                const result_final = result.map(eachResult => {\r\n                    return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\r\n                });\r\n\r\n                return result_final.includes(\"update\");\r\n            }\r\n        };\r\n\r\n        if (compareProps(this.props.metadata.metadata[0], nextProps.metadata.metadata[0], this.props.modelFiles.modelFiles, nextProps.modelFiles.modelFiles)) {\r\n            console.log(\"because of metadata\");\r\n            return true\r\n        }\r\n        else {\r\n            if (compareBindedDatasets(this.props.datasetFiles.datasetFiles, nextProps.datasetFiles.datasetFiles)) {\r\n                console.log(\"because of dataset files\");\r\n                return true;\r\n            }\r\n            else if (this.props.connectionFiles.connectionFiles[0] !== nextProps.connectionFiles.connectionFiles[0]) {\r\n                console.log(\"because of connection files\");\r\n                return true\r\n            }\r\n\r\n            else if (compareBindedDatasets(this.props.connectionFiles.bindedDatasets, nextProps.connectionFiles.bindedDatasets)) {\r\n                console.log(\"because of binded datasets\");\r\n                return true\r\n            }\r\n            else {\r\n                console.log(\"not update\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const DatasetWithName = ({ match }) => {\r\n            let selectedDataset = this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0] == undefined ? localStorage.getItem('datasetname-detaileddata') :\r\n                this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0].FileName;\r\n            //localStorage.setItem('datasetname-detaileddata', selectedDataset);\r\n            //console.log(\"detaileddata for name: \", selectedDataset);\r\n\r\n            return (\r\n                <DetailedDataset\r\n                    selectedDataset={this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0]}\r\n                    sendNameForDetailedData={this.props.sendNameForDetailedData}\r\n                    detailedData={this.props.detailedData.detailedData}\r\n                    isLoading_detailedData={this.props.detailedData.isLoading}\r\n                    errMess_detailedData={this.props.detailedData.errMess}\r\n\r\n                    metadata={this.props.metadata.metadata[0]}\r\n                    isLoading_metadata={this.props.metadata.isLoading}\r\n                    errMess_metadata={this.props.metadata.errMess} />\r\n            );\r\n        };\r\n\r\n        const DatasetSelect = ({ match }) => {\r\n            let datasetName = this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0] == undefined ? localStorage.getItem('datasetname-metadata') :\r\n                this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0].FileName;\r\n            console.log(\"dataset name: \", datasetName);\r\n            localStorage.setItem('datasetname-metadata', datasetName);\r\n\r\n            return (\r\n                <MetadataForm dataset={this.props.datasetFiles.datasetFiles.filter(dataset => dataset.FileName === match.params.datasetName)[0]}\r\n                    submitMetadata={this.props.submitMetadata}\r\n                    fetchDatasetFiles={this.props.fetchDatasetFiles}\r\n                    sendNameForDetailedData={this.props.sendNameForDetailedData}\r\n                    detailedData={this.props.detailedData.detailedData}\r\n                    isLoading_detailedData={this.props.detailedData.isLoading}\r\n                    errMess_detailedData={this.props.detailedData.errMess}\r\n\r\n                    metadata={this.props.metadata.metadata[0]}\r\n                    isLoading_metadata={this.props.metadata.isLoading}\r\n                    errMess_metadata={this.props.metadata.errMess}\r\n                />\r\n            );\r\n        };\r\n\r\n        const ModelSelect = ({ match }) => {\r\n            let modelName = this.props.modelFiles.modelFiles.filter(model => model.FileName === match.params.modelName)[0] == undefined ? localStorage.getItem('modelname') :\r\n                this.props.modelFiles.modelFiles.filter(model => model.FileName === match.params.modelName)[0].FileName;\r\n            console.log(\"model name: \", modelName);\r\n            localStorage.setItem('modelname', modelName);\r\n\r\n            return (\r\n                <BindedDatasets modelName={this.props.modelFiles.modelFiles.filter(model => model.FileName === match.params.modelName)[0]}\r\n                    getBindedDatasets={this.props.getBindedDatasets}\r\n                    isBindLoading={this.props.isBindLoading}\r\n                    bindedDatasets={this.props.connectionFiles.bindedDatasets}\r\n                    isBindLoading={this.props.connectionFiles.isLoading}\r\n\r\n                    deleteDataset={this.props.deleteOneBindedDataset}\r\n                    editModelDescription={this.props.editModelDescription}\r\n                    fetchModelFiles={this.props.fetchModelFiles}\r\n                />\r\n            );\r\n        };\r\n\r\n        return (\r\n            <Row>\r\n                <Col className=\"sidebar\" md=\"3\"><Sidebar username={this.props.user.userInfo} /></Col>\r\n                <Col className=\"main-page\">\r\n                    <Switch>\r\n                        <Route path=\"/uploading\" component={() =>\r\n                            <ConnectionUploading connectUploading={this.props.connectUploading}\r\n                                connectionFiles={this.props.connectionFiles.connectionFiles}\r\n                                uploadingStatus={this.props.connectionFiles.uploadingStatus}\r\n                                clearConnectionFiles={this.props.clearConnectionFiles}\r\n                            />} />\r\n\r\n                        <Route exact path=\"/mydatabase\" component={() =>\r\n                            <Database datasetFiles={this.props.datasetFiles.datasetFiles}\r\n                                isLoading={this.props.datasetFiles.isLoading}\r\n                                isQuery={this.props.datasetFiles.isQuery}\r\n                                errMess={this.props.datasetFiles.errMess}\r\n                                uploadDataset={this.props.uploadDataset}\r\n                                fetchUploadedDataset={this.props.fetchUploadedDataset}\r\n                                deleteDataset={this.props.deleteDataset}\r\n                                fetchDatasetFiles={this.props.fetchDatasetFiles}\r\n                                queryDatasets={this.props.queryDatasets}\r\n\r\n                                modelFiles={this.props.modelFiles.modelFiles}\r\n                                bindModel={this.props.bindModel}\r\n\r\n                                downloadFile={this.props.downloadFile}\r\n\r\n                                allDatasetFiles={this.props.allDatasetFiles.datasetFiles}\r\n                                isAllLoading={this.props.allDatasetFiles.isLoading}\r\n                                allErrMess={this.props.allDatasetFiles.errMess}\r\n                                fetchAllDatasetFiles={this.props.fetchAllDatasetFiles}\r\n                                queryAllDatasets={this.props.queryAllDatasets}\r\n                            />} />\r\n                        <Route path='/alldataset/:datasetName' component={DatasetWithName} />\r\n                        <Route path=\"/metadata-form/:datasetName\" component={DatasetSelect} />\r\n                        <Route path=\"/mymodels/:modelName\" component={ModelSelect} />\r\n                        <Route exact path=\"/mymodels\" component={() => <SOMModel\r\n                            modelFiles={this.props.modelFiles.modelFiles}\r\n                            isLoading={this.props.modelFiles.isLoading}\r\n                            errMess={this.props.modelFiles.errMess}\r\n                            uploadModel={this.props.uploadModel}\r\n                            fetchUploadedModel={this.props.fetchUploadedModel}\r\n                            deleteModel={this.props.deleteModel}\r\n                            editModelDescription={this.props.editModelDescription}\r\n                            fetchModelFiles={this.props.fetchModelFiles}\r\n                            fetchDatasetFiles={this.props.fetchDatasetFiles}\r\n\r\n                            connectUploading={this.props.connectUploading}\r\n                            connectionFiles={this.props.connectionFiles.connectionFiles}\r\n                            clearConnectionFiles={this.props.clearConnectionFiles}\r\n                            bindedDatasets={this.props.connectionFiles.bindedDatasets}\r\n                            getBindedDatasets={this.props.getBindedDatasets}\r\n\r\n                            queryModels={this.props.queryModels}\r\n                            isBindLoading={this.props.connectionFiles.isLoading}\r\n                        />} />\r\n                        <Route path=\"/visualisation\" component={Visualisation} />\r\n\r\n                        <Route path=\"/allmodels\" component={() => <AllModel\r\n                            fetchAllModels={this.props.fetchAllModels}\r\n                            allModels={this.props.allModels.modelFiles}\r\n                        />} />\r\n\r\n                        <Route exact path=\"/alldataset\" component={() =>\r\n                            <AllDataset datasetFiles={this.props.allDatasetFiles.datasetFiles}\r\n                                isLoading={this.props.allDatasetFiles.isLoading}\r\n                                errMess={this.props.allDatasetFiles.errMess}\r\n                                fetchDatasetFiles={this.props.fetchAllDatasetFiles}\r\n                                queryDatasets={this.props.queryAllDatasets}\r\n                            />} />\r\n                        <Redirect to=\"/mymodels\" />\r\n                    </Switch>\r\n                </Col>\r\n            </Row>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n"]},"metadata":{},"sourceType":"module"}