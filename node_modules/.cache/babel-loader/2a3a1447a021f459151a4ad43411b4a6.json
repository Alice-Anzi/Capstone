{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/DatasetUploadComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { IconButton, Modal } from '@material-ui/core';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport { Row, Col, Container, Progress, Button } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DatasetUpload(props) {\n  _s();\n\n  const DATASET_REMIND = \"Please upload your datasets. (only accept .dat, .txt, .csv, .xlsx)\";\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0); // tracking the status of uploading\n\n  const [message, setMessage] = useState(DATASET_REMIND);\n  const el = useRef(); // accesing input element\n\n  const validDatasetFormat = [\"dat\", \"txt\", \"csv\", \"xlsx\"];\n  const [dataset_message, setDatasetFail] = useState(\"1\"); // It is for get the uploaded file you selected\n\n  const handleDatasetChange = event => {\n    const files = event.target.files; // accessing file\n\n    let datasetMessage = '';\n\n    for (let file of files) {\n      let message = '';\n      const acceptedDatasetArray = file.name.split(\".\");\n      const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n\n      if (validDatasetFormat.includes(datasetExtension)) {\n        let reader = new FileReader();\n        console.log(\"file name: \", file.name);\n\n        reader.onloadend = () => {\n          let lines = reader.result.split('\\n');\n          console.log(\"check lines: \", lines);\n\n          try {\n            if (datasetExtension === \"txt\" || datasetExtension == \"dat\") {\n              const firstRow = lines[0].trim().split(\" \");\n              console.log(\"first row: \", firstRow);\n              console.log(\"first row: \", firstRow.length);\n\n              if (firstRow.length === 1) {\n                console.log(\"firs row len 1\");\n                let line_check = parseFloat(firstRow[0]);\n                message = Number.isNaN(line_check) ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              } else {\n                console.log(\"firs row len not 1\");\n                message = `# Could not upload ${file.name}. `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              }\n            } else {\n              const firstRow = lines[0].trim().split(\" \");\n              const secondRow = lines[1].trim().split(\" \");\n\n              if (firstRow.length !== secondRow.length) {\n                message = `# Could not upload ${file.name}. `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              } else {\n                const checkLine = secondRow.slice(0, secondRow.length - 1).map(elem => Number.isNaN(parseFloat(elem)) ? \"noUpdate\" : \"update\");\n                message = checkLine.includes(\"noUpdate\") ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n              }\n            }\n          } catch (e) {\n            message = `# Could not upload ${file.name}. `;\n            datasetMessage += message;\n            setDatasetFail(datasetMessage);\n          }\n        };\n\n        reader.onerror = () => {\n          message = `# Could not upload ${file.name}. `;\n          datasetMessage += message;\n          setDatasetFail(datasetMessage);\n        };\n\n        reader.readAsText(file);\n      } else {\n        message = `# Could not upload ${file.name}. `;\n        datasetMessage += message;\n        setDatasetFail(datasetMessage);\n      } // const acceptedDatasetArray = file.name.split(\".\");\n      // const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n      // let message = validDatasetFormat.includes(datasetExtension) ? `# ${file.name} uploaded successfully!  ` : `# Could not upload ${file.name}.  `;\n\n    }\n\n    setSelectedFiles(files); // storing file\n  };\n\n  const handleUploadBtn = () => {\n    uploadFile();\n  };\n\n  const uploadFile = () => {\n    setProgress(0); //console.log(\"accepted dataset: \", selectedFiles);\n\n    const formData = new FormData();\n    formData.append('username', selectedFiles[0], sessionStorage.getItem('verifiedUsername'));\n\n    if (selectedFiles !== undefined) {\n      for (let i = 0; i < selectedFiles.length; i++) {\n        formData.append(`file${i}`, selectedFiles[i]); // appending file\n      }\n    } // Display the keys\n\n\n    for (var key of formData.keys()) {\n      console.log(key);\n    }\n\n    setCurrentFile(selectedFiles); // 'props.uploadDataset' is from Redux actionCreators, which is used to post the uploaded dataset to the backend server\n\n    props.uploadDataset(formData, event => {\n      setProgress(Math.round(100 * event.loaded / event.total));\n    }, sessionStorage.getItem('verifiedUsername')).then(response => {\n      setMessage(\"Uploaded successfully\");\n    }).catch(() => {\n      setProgress(0);\n      setMessage(dataset_message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentFile && /*#__PURE__*/_jsxDEV(Progress, {\n        animated: true,\n        value: progress,\n        max: \"100\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        paddingTop: '2%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: \"9\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              multiple: true,\n              ref: el,\n              onChange: handleDatasetChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-light\",\n              role: \"alert\",\n              children: message.split(\"#\").map(eachMessage => /*#__PURE__*/_jsxDEV(\"p\", {\n                children: eachMessage.includes(\"successfully\") || eachMessage === DATASET_REMIND ? eachMessage : /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: eachMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 128\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: \"#378CC6\"\n          },\n          disabled: !selectedFiles,\n          onClick: handleUploadBtn,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DatasetUpload, \"PPwwmWZ2qGeIrRN7a+PzRLNIFtg=\");\n\n_c = DatasetUpload;\nexport default DatasetUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"DatasetUpload\");","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/DatasetUploadComponent.js"],"names":["React","useState","useRef","IconButton","Modal","PublishIcon","Row","Col","Container","Progress","Button","DatasetUpload","props","DATASET_REMIND","selectedFiles","setSelectedFiles","undefined","currentFile","setCurrentFile","progress","setProgress","message","setMessage","el","validDatasetFormat","dataset_message","setDatasetFail","handleDatasetChange","event","files","target","datasetMessage","file","acceptedDatasetArray","name","split","datasetExtension","slice","length","includes","reader","FileReader","console","log","onloadend","lines","result","firstRow","trim","line_check","parseFloat","Number","isNaN","secondRow","checkLine","map","elem","e","onerror","readAsText","handleUploadBtn","uploadFile","formData","FormData","append","sessionStorage","getItem","i","key","keys","uploadDataset","Math","round","loaded","total","then","response","catch","paddingTop","eachMessage","color","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,mBAAlC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,QAAsD,YAAtD;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC1B,QAAMC,cAAc,GAAG,oEAAvB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAACe,SAAD,CAAlD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAACe,SAAD,CAA9C;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,CAAD,CAAxC,CAJ0B,CAImB;;AAC7C,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAACY,cAAD,CAAtC;AACA,QAAMU,EAAE,GAAGrB,MAAM,EAAjB,CAN0B,CAML;;AAErB,QAAMsB,kBAAkB,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,MAAtB,CAA3B;AACA,QAAM,CAACC,eAAD,EAAkBC,cAAlB,IAAoCzB,QAAQ,CAAC,GAAD,CAAlD,CAT0B,CAW1B;;AACA,QAAM0B,mBAAmB,GAAIC,KAAD,IAAW;AACnC,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B,CADmC,CACD;;AAClC,QAAIE,cAAc,GAAG,EAArB;;AAEA,SAAK,IAAIC,IAAT,IAAiBH,KAAjB,EAAwB;AACpB,UAAIR,OAAO,GAAG,EAAd;AAEA,YAAMY,oBAAoB,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAA7B;AACA,YAAMC,gBAAgB,GAAGH,oBAAoB,CAACI,KAArB,CAA2BJ,oBAAoB,CAACK,MAArB,GAA8B,CAAzD,EAA4DL,oBAAoB,CAACK,MAAjF,EAAyF,CAAzF,CAAzB;;AACA,UAAId,kBAAkB,CAACe,QAAnB,CAA4BH,gBAA5B,CAAJ,EAAmD;AAC/C,YAAII,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BX,IAAI,CAACE,IAAhC;;AACAM,QAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM;AACrB,cAAIC,KAAK,GAAGL,MAAM,CAACM,MAAP,CAAcX,KAAd,CAAoB,IAApB,CAAZ;AACAO,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,KAA7B;;AACA,cAAI;AAEA,gBAAIT,gBAAgB,KAAK,KAArB,IAA8BA,gBAAgB,IAAI,KAAtD,EAA6D;AACzD,oBAAMW,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,GAAgBb,KAAhB,CAAsB,GAAtB,CAAjB;AACAO,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BI,QAA3B;AACAL,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BI,QAAQ,CAACT,MAApC;;AAEA,kBAAIS,QAAQ,CAACT,MAAT,KAAoB,CAAxB,EAA2B;AACvBI,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,oBAAIM,UAAU,GAAGC,UAAU,CAACH,QAAQ,CAAC,CAAD,CAAT,CAA3B;AACA1B,gBAAAA,OAAO,GAAG8B,MAAM,CAACC,KAAP,CAAaH,UAAb,IAA4B,sBAAqBjB,IAAI,CAACE,IAAK,IAA3D,GAAkE,KAAIF,IAAI,CAACE,IAAK,2BAA1F;AACAH,gBAAAA,cAAc,IAAIV,OAAlB;AACAK,gBAAAA,cAAc,CAACK,cAAD,CAAd;AACH,eAND,MAOK;AACDW,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAtB,gBAAAA,OAAO,GAAI,sBAAqBW,IAAI,CAACE,IAAK,IAA1C;AACAH,gBAAAA,cAAc,IAAIV,OAAlB;AACAK,gBAAAA,cAAc,CAACK,cAAD,CAAd;AACH;AACJ,aAlBD,MAmBI;AACA,oBAAMgB,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,GAAgBb,KAAhB,CAAsB,GAAtB,CAAjB;AACA,oBAAMkB,SAAS,GAAGR,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,GAAgBb,KAAhB,CAAsB,GAAtB,CAAlB;;AAEA,kBAAIY,QAAQ,CAACT,MAAT,KAAoBe,SAAS,CAACf,MAAlC,EAAyC;AACrCjB,gBAAAA,OAAO,GAAI,sBAAqBW,IAAI,CAACE,IAAK,IAA1C;AACAH,gBAAAA,cAAc,IAAIV,OAAlB;AACAK,gBAAAA,cAAc,CAACK,cAAD,CAAd;AACH,eAJD,MAKI;AACA,sBAAMuB,SAAS,GAAGD,SAAS,CAAChB,KAAV,CAAgB,CAAhB,EAAmBgB,SAAS,CAACf,MAAV,GAAiB,CAApC,EAAuCiB,GAAvC,CAA4CC,IAAI,IAAIL,MAAM,CAACC,KAAP,CAAaF,UAAU,CAACM,IAAD,CAAvB,IAAiC,UAAjC,GAA8C,QAAlG,CAAlB;AACAnC,gBAAAA,OAAO,GAAGiC,SAAS,CAACf,QAAV,CAAmB,UAAnB,IAAkC,sBAAqBP,IAAI,CAACE,IAAK,IAAjE,GAAwE,KAAIF,IAAI,CAACE,IAAK,2BAAhG;AACAH,gBAAAA,cAAc,IAAIV,OAAlB;AACAK,gBAAAA,cAAc,CAACK,cAAD,CAAd;AACH;AACJ;AAGJ,WAvCD,CAwCA,OAAO0B,CAAP,EAAU;AACNpC,YAAAA,OAAO,GAAI,sBAAqBW,IAAI,CAACE,IAAK,IAA1C;AACAH,YAAAA,cAAc,IAAIV,OAAlB;AACAK,YAAAA,cAAc,CAACK,cAAD,CAAd;AACH;AACJ,SAhDD;;AAkDAS,QAAAA,MAAM,CAACkB,OAAP,GAAiB,MAAM;AACnBrC,UAAAA,OAAO,GAAI,sBAAqBW,IAAI,CAACE,IAAK,IAA1C;AACAH,UAAAA,cAAc,IAAIV,OAAlB;AACAK,UAAAA,cAAc,CAACK,cAAD,CAAd;AACH,SAJD;;AAMAS,QAAAA,MAAM,CAACmB,UAAP,CAAkB3B,IAAlB;AACH,OA5DD,MA6DK;AACDX,QAAAA,OAAO,GAAI,sBAAqBW,IAAI,CAACE,IAAK,IAA1C;AACAH,QAAAA,cAAc,IAAIV,OAAlB;AACAK,QAAAA,cAAc,CAACK,cAAD,CAAd;AACH,OAtEmB,CAwEpB;AACA;AACA;;AAEH;;AACDhB,IAAAA,gBAAgB,CAACc,KAAD,CAAhB,CAjFmC,CAiFV;AAC5B,GAlFD;;AAoFA,QAAM+B,eAAe,GAAG,MAAM;AAC1BC,IAAAA,UAAU;AACb,GAFD;;AAIA,QAAMA,UAAU,GAAG,MAAM;AACrBzC,IAAAA,WAAW,CAAC,CAAD,CAAX,CADqB,CAGrB;;AAEA,UAAM0C,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BlD,aAAa,CAAC,CAAD,CAAzC,EAA8CmD,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAA9C;;AACA,QAAIpD,aAAa,KAAKE,SAAtB,EAAiC;AAC7B,WAAK,IAAImD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,aAAa,CAACwB,MAAlC,EAA0C6B,CAAC,EAA3C,EAA+C;AAC3CL,QAAAA,QAAQ,CAACE,MAAT,CAAiB,OAAMG,CAAE,EAAzB,EAA4BrD,aAAa,CAACqD,CAAD,CAAzC,EAD2C,CACI;AAClD;AACJ,KAXoB,CAarB;;;AACA,SAAK,IAAIC,GAAT,IAAgBN,QAAQ,CAACO,IAAT,EAAhB,EAAiC;AAC7B3B,MAAAA,OAAO,CAACC,GAAR,CAAYyB,GAAZ;AACH;;AAEDlD,IAAAA,cAAc,CAACJ,aAAD,CAAd,CAlBqB,CAoBrB;;AACAF,IAAAA,KAAK,CAAC0D,aAAN,CAAoBR,QAApB,EAA+BlC,KAAD,IAAW;AACrCR,MAAAA,WAAW,CAACmD,IAAI,CAACC,KAAL,CAAY,MAAM5C,KAAK,CAAC6C,MAAb,GAAuB7C,KAAK,CAAC8C,KAAxC,CAAD,CAAX;AACH,KAFD,EAEGT,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAFH,EAGKS,IAHL,CAGWC,QAAD,IAAc;AAChBtD,MAAAA,UAAU,CAAC,uBAAD,CAAV;AACH,KALL,EAMKuD,KANL,CAMW,MAAM;AACTzD,MAAAA,WAAW,CAAC,CAAD,CAAX;AACAE,MAAAA,UAAU,CAACG,eAAD,CAAV;AACH,KATL;AAUH,GA/BD;;AAiCA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAA,gBACKR,WAAW,iBAAK,QAAC,QAAD;AAAU,QAAA,QAAQ,MAAlB;AAAmB,QAAA,KAAK,EAAEE,QAA1B;AAAoC,QAAA,GAAG,EAAC,KAAxC;AAAA,mBAA+CA,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AADrB;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAE2D,QAAAA,UAAU,EAAE;AAAd,OAAZ;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAA,+BACI,QAAC,GAAD;AAAA,iCACI;AAAO,YAAA,OAAO,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,QAAQ,MAA3B;AAA4B,cAAA,GAAG,EAAEvD,EAAjC;AAAqC,cAAA,QAAQ,EAAEI;AAA/C;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,cAAA,SAAS,EAAC,mBAAf;AAAmC,cAAA,IAAI,EAAC,OAAxC;AAAA,wBACKN,OAAO,CAACc,KAAR,CAAc,GAAd,EAAmBoB,GAAnB,CAAuBwB,WAAW,iBAC/B;AAAA,0BAAIA,WAAW,CAACxC,QAAZ,CAAqB,cAArB,KAAwCwC,WAAW,KAAKlE,cAAxD,GAAyEkE,WAAzE,gBAAuF;AAAK,kBAAA,KAAK,EAAE;AAAEC,oBAAAA,KAAK,EAAE;AAAT,mBAAZ;AAAA,4BAA+BD;AAA/B;AAAA;AAAA;AAAA;AAAA;AAA3F;AAAA;AAAA;AAAA;AAAA,sBADH;AADL;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAcI,QAAC,GAAD;AAAA,+BACI,QAAC,MAAD;AACI,UAAA,KAAK,EAAE;AAAEE,YAAAA,eAAe,EAAE;AAAnB,WADX;AAEI,UAAA,QAAQ,EAAE,CAACnE,aAFf;AAGI,UAAA,OAAO,EAAE8C,eAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GAtKQjD,a;;KAAAA,a;AAwKT,eAAeA,aAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { IconButton, Modal } from '@material-ui/core';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport { Row, Col, Container, Progress, Button } from 'reactstrap';\n\nfunction DatasetUpload(props) {\n    const DATASET_REMIND = \"Please upload your datasets. (only accept .dat, .txt, .csv, .xlsx)\";\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\n    const [currentFile, setCurrentFile] = useState(undefined);\n    const [progress, setProgress] = useState(0); // tracking the status of uploading\n    const [message, setMessage] = useState(DATASET_REMIND);\n    const el = useRef(); // accesing input element\n\n    const validDatasetFormat = [\"dat\", \"txt\", \"csv\", \"xlsx\"];\n    const [dataset_message, setDatasetFail] = useState(\"1\");\n\n    // It is for get the uploaded file you selected\n    const handleDatasetChange = (event) => {\n        const files = event.target.files; // accessing file\n        let datasetMessage = '';\n\n        for (let file of files) {\n            let message = '';\n\n            const acceptedDatasetArray = file.name.split(\".\");\n            const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n            if (validDatasetFormat.includes(datasetExtension)) {\n                let reader = new FileReader();\n                console.log(\"file name: \", file.name);\n                reader.onloadend = () => {\n                    let lines = reader.result.split('\\n');\n                    console.log(\"check lines: \", lines);\n                    try {\n\n                        if (datasetExtension === \"txt\" || datasetExtension == \"dat\") {\n                            const firstRow = lines[0].trim().split(\" \");\n                            console.log(\"first row: \", firstRow);\n                            console.log(\"first row: \", firstRow.length);\n\n                            if (firstRow.length === 1) {\n                                console.log(\"firs row len 1\");\n                                let line_check = parseFloat(firstRow[0]);\n                                message = Number.isNaN(line_check) ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                            else {\n                                console.log(\"firs row len not 1\");\n                                message = `# Could not upload ${file.name}. `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                        }\n                        else{\n                            const firstRow = lines[0].trim().split(\" \");\n                            const secondRow = lines[1].trim().split(\" \");\n \n                            if (firstRow.length !== secondRow.length){\n                                message = `# Could not upload ${file.name}. `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                            else{\n                                const checkLine = secondRow.slice(0, secondRow.length-1).map( elem => Number.isNaN(parseFloat(elem)) ? \"noUpdate\" : \"update\");\n                                message = checkLine.includes(\"noUpdate\") ? `# Could not upload ${file.name}. ` : `# ${file.name} uploaded successfully!  `;\n                                datasetMessage += message;\n                                setDatasetFail(datasetMessage);\n                            }\n                        }\n\n\n                    }\n                    catch (e) {\n                        message = `# Could not upload ${file.name}. `;\n                        datasetMessage += message;\n                        setDatasetFail(datasetMessage);\n                    }\n                };\n\n                reader.onerror = () => {\n                    message = `# Could not upload ${file.name}. `;\n                    datasetMessage += message;\n                    setDatasetFail(datasetMessage);\n                };\n\n                reader.readAsText(file);\n            }\n            else {\n                message = `# Could not upload ${file.name}. `;\n                datasetMessage += message;\n                setDatasetFail(datasetMessage);\n            }\n\n            // const acceptedDatasetArray = file.name.split(\".\");\n            // const datasetExtension = acceptedDatasetArray.slice(acceptedDatasetArray.length - 1, acceptedDatasetArray.length)[0];\n            // let message = validDatasetFormat.includes(datasetExtension) ? `# ${file.name} uploaded successfully!  ` : `# Could not upload ${file.name}.  `;\n\n        }\n        setSelectedFiles(files); // storing file\n    }\n\n    const handleUploadBtn = () => {\n        uploadFile();\n    }\n\n    const uploadFile = () => {\n        setProgress(0);\n\n        //console.log(\"accepted dataset: \", selectedFiles);\n\n        const formData = new FormData();\n        formData.append('username', selectedFiles[0], sessionStorage.getItem('verifiedUsername'));\n        if (selectedFiles !== undefined) {\n            for (let i = 0; i < selectedFiles.length; i++) {\n                formData.append(`file${i}`, selectedFiles[i]); // appending file\n            }\n        }\n\n        // Display the keys\n        for (var key of formData.keys()) {\n            console.log(key);\n        }\n\n        setCurrentFile(selectedFiles);\n\n        // 'props.uploadDataset' is from Redux actionCreators, which is used to post the uploaded dataset to the backend server\n        props.uploadDataset(formData, (event) => {\n            setProgress(Math.round((100 * event.loaded) / event.total));\n        }, sessionStorage.getItem('verifiedUsername'))\n            .then((response) => {\n                setMessage(\"Uploaded successfully\");\n            })\n            .catch(() => {\n                setProgress(0);\n                setMessage(dataset_message);\n            });\n    };\n\n    return (\n        <Container>\n            <div>\n                {currentFile && (<Progress animated value={progress} max=\"100\">{progress}%</Progress>)}\n            </div>\n\n            {/** datasets */}\n            <Row style={{ paddingTop: '2%' }}>\n                <Col md=\"9\">\n                    <Row>\n                        <label htmlFor=\"file-upload\">\n                            <input type=\"file\" multiple ref={el} onChange={handleDatasetChange} />\n                            <div className=\"alert alert-light\" role=\"alert\">\n                                {message.split(\"#\").map(eachMessage =>\n                                    <p>{eachMessage.includes(\"successfully\") || eachMessage === DATASET_REMIND ? eachMessage : <div style={{ color: 'red' }}>{eachMessage}</div>}</p>\n                                )}\n                            </div>\n                        </label>\n                    </Row>\n                </Col>\n\n                <Col>\n                    <Button\n                        style={{ backgroundColor: \"#378CC6\" }}\n                        disabled={!selectedFiles}\n                        onClick={handleUploadBtn}>\n                        Upload\n                    </Button>\n                </Col>\n\n            </Row>\n        </Container>\n    );\n}\n\nexport default DatasetUpload;\n\n"]},"metadata":{},"sourceType":"module"}