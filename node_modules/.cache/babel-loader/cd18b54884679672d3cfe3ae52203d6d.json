{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nexport const ConnectionFiles = (state = {\n  isLoading: true,\n  errMess: null,\n  connectionFiles: [\"this is for a uploaded model\", [\"this is for uploaded datasets\"]],\n  uploadingStatus: [\"\", \"\"],\n  bindedDatasets: []\n}, action) => {\n  switch (action.type) {\n    // when a user upload a dataset, we will first send the dataset to the server,\n    // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\n    // only then we will add it to the redux store.\n    case ActionTypes.ADD_CONNECTIONS:\n      var files = action.payload; // get the uploaded dataset\n\n      console.log(\"did i get the connected files? \", action.payload);\n      return { ...state,\n        connectionFiles: action.payload\n      };\n\n    case ActionTypes.UPDATE_UPLOADINGSTATUS:\n      return { ...state,\n        uploadingStatus: action.payload\n      };\n\n    case ActionTypes.CLEAR_CONNECTIONS:\n      const connectionFiles = [\"\", [\"\"]];\n      return { ...state,\n        connectionFiles: connectionFiles\n      };\n\n    case ActionTypes.ADD_BINDDATASETS:\n      console.log(\"did i get the binded datasets? \", action.payload);\n      return { ...state,\n        isLoading: false,\n        bindedDatasets: action.payload\n      };\n\n    case ActionTypes.BIND_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        bindedDatasets: []\n      };\n\n    case ActionTypes.REMOVE_BIND:\n      console.log(\"start delete a binded dataset\");\n      var datasetName = action.payload; // to get the filename of the selected dataset\n\n      let deletedIndex = 0; // to find the corresponding index based on filename\n\n      console.log(\"get dataset is \" + datasetName);\n\n      for (let [index, eachDataset] of Object.entries(state.bindedDatasets)) {\n        if (eachDataset.FileName === datasetName) {\n          deletedIndex = parseInt(index, 10);\n        }\n      }\n\n      console.log(\"deletedIndex is \" + deletedIndex);\n      const newDataset = [...state.datasetFiles.slice(0, deletedIndex), ...state.datasetFiles.slice(deletedIndex + 1, state.datasetFiles.length)];\n      return { ...state,\n        bindedDatasets: newDataset\n      };\n\n    default:\n      return state;\n  }\n};\n_c = ConnectionFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectionFiles\");","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/redux/connectionResult.js"],"names":["ActionTypes","ConnectionFiles","state","isLoading","errMess","connectionFiles","uploadingStatus","bindedDatasets","action","type","ADD_CONNECTIONS","files","payload","console","log","UPDATE_UPLOADINGSTATUS","CLEAR_CONNECTIONS","ADD_BINDDATASETS","BIND_LOADING","REMOVE_BIND","datasetName","deletedIndex","index","eachDataset","Object","entries","FileName","parseInt","newDataset","datasetFiles","slice","length"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG;AACpCC,EAAAA,SAAS,EAAE,IADyB;AAEpCC,EAAAA,OAAO,EAAE,IAF2B;AAGpCC,EAAAA,eAAe,EAAE,CAAC,8BAAD,EAAiC,CAAC,+BAAD,CAAjC,CAHmB;AAIpCC,EAAAA,eAAe,EAAE,CAAC,EAAD,EAAK,EAAL,CAJmB;AAKpCC,EAAAA,cAAc,EAAE;AALoB,CAAT,EAM5BC,MAN4B,KAMjB;AACV,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AACA;AACA,SAAKT,WAAW,CAACU,eAAjB;AACI,UAAIC,KAAK,GAAGH,MAAM,CAACI,OAAnB,CADJ,CACgC;;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CN,MAAM,CAACI,OAAtD;AACA,aAAO,EAAE,GAAGV,KAAL;AAAYG,QAAAA,eAAe,EAAEG,MAAM,CAACI;AAApC,OAAP;;AAEJ,SAAKZ,WAAW,CAACe,sBAAjB;AACI,aAAO,EAAE,GAAGb,KAAL;AAAYI,QAAAA,eAAe,EAAEE,MAAM,CAACI;AAApC,OAAP;;AAEJ,SAAKZ,WAAW,CAACgB,iBAAjB;AACI,YAAMX,eAAe,GAAG,CAAC,EAAD,EAAK,CAAC,EAAD,CAAL,CAAxB;AACA,aAAO,EAAE,GAAGH,KAAL;AAAYG,QAAAA,eAAe,EAAEA;AAA7B,OAAP;;AAEJ,SAAKL,WAAW,CAACiB,gBAAjB;AACIJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CN,MAAM,CAACI,OAAtD;AACA,aAAO,EAAE,GAAGV,KAAL;AAAYC,QAAAA,SAAS,EAAE,KAAvB;AAA8BI,QAAAA,cAAc,EAAEC,MAAM,CAACI;AAArD,OAAP;;AAEJ,SAAKZ,WAAW,CAACkB,YAAjB;AACI,aAAO,EAAE,GAAGhB,KAAL;AAAYC,QAAAA,SAAS,EAAE,IAAvB;AAA6BC,QAAAA,OAAO,EAAE,IAAtC;AAA4CG,QAAAA,cAAc,EAAE;AAA5D,OAAP;;AAEJ,SAAKP,WAAW,CAACmB,WAAjB;AACIN,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,UAAIM,WAAW,GAAGZ,MAAM,CAACI,OAAzB,CAFJ,CAEsC;;AAClC,UAAIS,YAAY,GAAG,CAAnB,CAHJ,CAG0B;;AACtBR,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBM,WAAhC;;AACA,WAAK,IAAI,CAACE,KAAD,EAAQC,WAAR,CAAT,IAAiCC,MAAM,CAACC,OAAP,CAAevB,KAAK,CAACK,cAArB,CAAjC,EAAuE;AACnE,YAAIgB,WAAW,CAACG,QAAZ,KAAyBN,WAA7B,EAA0C;AACtCC,UAAAA,YAAY,GAAGM,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAAvB;AACH;AACJ;;AAEDT,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBO,YAAjC;AAEA,YAAMO,UAAU,GAAG,CACf,GAAG1B,KAAK,CAAC2B,YAAN,CAAmBC,KAAnB,CAAyB,CAAzB,EAA4BT,YAA5B,CADY,EAEf,GAAGnB,KAAK,CAAC2B,YAAN,CAAmBC,KAAnB,CAAyBT,YAAY,GAAG,CAAxC,EAA2CnB,KAAK,CAAC2B,YAAN,CAAmBE,MAA9D,CAFY,CAAnB;AAIA,aAAO,EAAE,GAAG7B,KAAL;AAAYK,QAAAA,cAAc,EAAEqB;AAA5B,OAAP;;AAEJ;AACI,aAAO1B,KAAP;AA3CR;AA6CH,CApDM;KAAMD,e","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\nexport const ConnectionFiles = (state = {\n    isLoading: true,\n    errMess: null,\n    connectionFiles: [\"this is for a uploaded model\", [\"this is for uploaded datasets\"]],\n    uploadingStatus: [\"\", \"\"],\n    bindedDatasets: []\n}, action) => {\n    switch (action.type) {\n        // when a user upload a dataset, we will first send the dataset to the server,\n        // if the dataset is successfully added on the server site, and the server sends back a success of the posting of the dataset\n        // only then we will add it to the redux store.\n        case ActionTypes.ADD_CONNECTIONS:\n            var files = action.payload; // get the uploaded dataset\n            console.log(\"did i get the connected files? \", action.payload)\n            return { ...state, connectionFiles: action.payload };\n        \n        case ActionTypes.UPDATE_UPLOADINGSTATUS:\n            return { ...state, uploadingStatus: action.payload };\n\n        case ActionTypes.CLEAR_CONNECTIONS:\n            const connectionFiles = [\"\", [\"\"]]\n            return { ...state, connectionFiles: connectionFiles };\n\n        case ActionTypes.ADD_BINDDATASETS:\n            console.log(\"did i get the binded datasets? \", action.payload)\n            return { ...state, isLoading: false, bindedDatasets: action.payload };\n\n        case ActionTypes.BIND_LOADING:\n            return { ...state, isLoading: true, errMess: null, bindedDatasets: [] };\n\n        case ActionTypes.REMOVE_BIND:\n            console.log(\"start delete a binded dataset\");\n            var datasetName = action.payload; // to get the filename of the selected dataset\n            let deletedIndex = 0; // to find the corresponding index based on filename\n            console.log(\"get dataset is \" + datasetName);\n            for (let [index, eachDataset] of Object.entries(state.bindedDatasets)) {\n                if (eachDataset.FileName === datasetName) {\n                    deletedIndex = parseInt(index, 10);\n                }\n            }\n\n            console.log(\"deletedIndex is \" + deletedIndex);\n\n            const newDataset = [\n                ...state.datasetFiles.slice(0, deletedIndex),\n                ...state.datasetFiles.slice(deletedIndex + 1, state.datasetFiles.length)];\n\n            return { ...state, bindedDatasets: newDataset };\n\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}