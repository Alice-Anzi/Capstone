{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nexport const ModelFiles = (state = {\n  isLoading: true,\n  errMess: null,\n  modelFiles: []\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_MODELFILES:\n      console.log(\"I wanna check model file\");\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        modelFiles: action.payload\n      };\n\n    case ActionTypes.MODELFILES_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        modelFiles: []\n      };\n\n    case ActionTypes.MODELFILES_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload\n      };\n\n    case ActionTypes.UPLOAD_MODEL:\n      var model = action.payload; // get the uploaded model\n\n      return { ...state,\n        modelFiles: [...state.modelFiles, ...model]\n      };\n\n    case ActionTypes.REMOVE_MODEL:\n      console.log(\"start delete\");\n      var modelName = action.payload; // to get the filename of the selected model\n\n      let deletedIndex = 0; // to find the corresponding index based on filename\n\n      console.log(\"get model is \" + modelName);\n\n      for (let [index, eachModel] of Object.entries(state.modelFiles)) {\n        if (eachModel.FileName === modelName) {\n          deletedIndex = parseInt(index, 10);\n        }\n      }\n\n      console.log(\"deletedIndex is \" + deletedIndex);\n      const newModel = [...state.modelFiles.slice(0, deletedIndex), ...state.modelFiles.slice(deletedIndex + 1, state.modelFiles.length)];\n      return { ...state,\n        modelFiles: newModel\n      };\n\n    case ActionTypes.EDIT_MODEL_DESCRIPTION:\n      console.log(\"start edit\");\n      var {\n        modelName,\n        description\n      } = action.payload;\n      console.log(\"my modelname:\", modelName);\n      console.log(\"my description:\", description);\n      state.modelFiles.forEach(item => {\n        if (item.FileName === modelName) {\n          item.BriefInfo = description;\n        }\n      });\n      const updatedModel = state.modelFiles.map(item => {\n        if (item.FileName === modelName) {\n          item.BriefInfo = description;\n          return item;\n        } else {\n          return item;\n        }\n      });\n      console.log(\"new modelFile: \", updatedModel);\n      return { ...state,\n        modelFiles: updatedModel\n      };\n\n    default:\n      return state;\n  }\n};\n_c = ModelFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModelFiles\");","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/redux/modelFiles.js"],"names":["ActionTypes","ModelFiles","state","isLoading","errMess","modelFiles","action","type","ADD_MODELFILES","console","log","payload","MODELFILES_LOADING","MODELFILES_FAILED","UPLOAD_MODEL","model","REMOVE_MODEL","modelName","deletedIndex","index","eachModel","Object","entries","FileName","parseInt","newModel","slice","length","EDIT_MODEL_DESCRIPTION","description","forEach","item","BriefInfo","updatedModel","map"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\n\r\nexport const ModelFiles = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    modelFiles: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_MODELFILES:\r\n            console.log(\"I wanna check model file\");\r\n            return { ...state, isLoading: false, errMess: null, modelFiles: action.payload };\r\n\r\n        case ActionTypes.MODELFILES_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, modelFiles: [] }\r\n\r\n        case ActionTypes.MODELFILES_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload };\r\n\r\n        case ActionTypes.UPLOAD_MODEL:\r\n            var model = action.payload; // get the uploaded model\r\n            return { ...state, modelFiles: [...state.modelFiles,...model] };\r\n\r\n        case ActionTypes.REMOVE_MODEL:\r\n            console.log(\"start delete\");\r\n            var modelName = action.payload; // to get the filename of the selected model\r\n            let deletedIndex = 0; // to find the corresponding index based on filename\r\n            console.log(\"get model is \" + modelName);\r\n            for (let [index, eachModel] of Object.entries(state.modelFiles)) {\r\n                if (eachModel.FileName === modelName) {\r\n                    deletedIndex = parseInt(index, 10);\r\n                }\r\n            }\r\n\r\n            console.log(\"deletedIndex is \" + deletedIndex);\r\n\r\n            const newModel = [\r\n                ...state.modelFiles.slice(0, deletedIndex),\r\n                ...state.modelFiles.slice(deletedIndex + 1, state.modelFiles.length)];\r\n\r\n            return { ...state, modelFiles: newModel };\r\n            \r\n        case ActionTypes.EDIT_MODEL_DESCRIPTION:\r\n            console.log(\"start edit\");\r\n            var {modelName,description} = action.payload;\r\n            console.log(\"my modelname:\", modelName);\r\n            console.log(\"my description:\", description)\r\n            state.modelFiles.forEach(item=>{\r\n              if(item.FileName===modelName){\r\n                item.BriefInfo=description\r\n              }\r\n            })\r\n\r\n            const updatedModel = state.modelFiles.map(item => {\r\n                if(item.FileName===modelName){\r\n                    item.BriefInfo=description\r\n                    return item\r\n                }else{\r\n                    return item\r\n                }\r\n            });\r\n\r\n            console.log(\"new modelFile: \", updatedModel)\r\n            return { ...state, modelFiles: updatedModel};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}