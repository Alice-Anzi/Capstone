{"ast":null,"code":"function compareProps(currentMetadata, nextMetadata, currentModelFiles, nextModelFiles) {\n  //console.log(\"compareMetadata: \", currentMetadata);\n  //console.log(\"nextMetadata: \", nextMetadata);\n  //console.log(\"nextBriefInfo: \", nextMetadata['BriefInfo']);\n  const compareBriefInfo = currentMetadata.BriefInfo !== nextMetadata.BriefInfo ? true : false;\n  const compareDescription = currentMetadata.Description !== nextMetadata.Description ? true : false;\n  const compareSource = currentMetadata.Source !== nextMetadata.Source ? true : false;\n  const compareNumber_of_Instance = currentMetadata.Number_of_Instance !== nextMetadata.Number_of_Instance ? true : false;\n  const compareNumber_of_Attribute = currentMetadata.Number_of_Attribute !== nextMetadata.Number_of_Attribute ? true : false;\n  const compareLabel = currentMetadata.Label !== nextMetadata.Label ? true : false;\n\n  const compareKeyWords = (currentKeywords, nextKeywords) => {\n    // if their lengths are different, meaning keywords got changed, so needs to be updated\n    if (currentKeywords.length !== nextKeywords.length) {\n      return true;\n    } else {\n      // if some content in those kywords are different, then needs to update\n      const result = currentKeywords.map((value, index) => {\n        return value !== nextKeywords[index] ? \"update\" : \"noUpdate\";\n      });\n      return result.includes(\"update\");\n    }\n  };\n\n  const compareAttributes = (currentAttributes, nextAttributes) => {\n    if (currentAttributes.length !== nextAttributes.length) {\n      return true;\n    } else {\n      const attr_result = currentAttributes.map((eachValue, index) => {\n        return Object.values(eachValue).map((eachAttr, attrIndex) => {\n          return eachAttr !== Object.values(nextAttributes[index])[attrIndex] ? \"update\" : \"noUpdate\";\n        });\n      });\n      const attr_result_final = attr_result.map(eachResult => {\n        return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n      });\n      return attr_result_final.includes(\"update\");\n    }\n  };\n\n  const compareModelFiles = (currentModelFiles, nextModelFiles) => {\n    if (currentModelFiles.length !== nextModelFiles.length) {\n      return true;\n    } else {\n      const attr_result = currentModelFiles.map((eachValue, index) => {\n        return Object.values(eachValue).map((eachAttr, attrIndex) => {\n          return eachAttr !== Object.values(nextModelFiles[index])[attrIndex] ? \"update\" : \"noUpdate\";\n        });\n      });\n      const attr_result_final = attr_result.map(eachResult => {\n        return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n      });\n      console.log(\"briefInfo result: \", attr_result);\n      return attr_result_final.includes(\"update\");\n    }\n  }; // compare model files\n  // const compareModelFiles = (currentModelFiles, nextModelFiles) => {\n  //     console.log(\"currentModelFiles: \", currentModelFiles);\n  //     console.log(\"nextModelFiles: \", nextModelFiles);\n  //     if(currentModelFiles.length !== nextModelFiles.length){\n  //         console.log(\"because of model files\");\n  //         return true\n  //     }\n  //     else if (currentModelFiles.length !== 0 && nextModelFiles.length !== 0){\n  //         console.log(\"check current model: \", currentModelFiles);\n  //         console.log(\"check next model: \", nextModelFiles[0]);\n  //         const BriefInfo_result = currentModelFiles.map((eachModel, index) => {\n  //             console.log(\"current briefInfo: \", eachModel.BriefInfo);\n  //             console.log(\"next briefInfo1: \", nextModelFiles[index]);\n  //             const nextmodel = nextModelFiles[index];\n  //             console.log(\"next brirfInfo: \", nextmodel.BriefInfo);\n  //             return eachModel.BriefInfo !== nextModelFiles[index][\"BriefInfo\"] ? \"update\" : \"noUpdate\";\n  //         });\n  //         console.log(\"model result: \", BriefInfo_result);\n  //         return BriefInfo_result.includes(\"update\");\n  //     }\n  // }\n  // console.log(`compareBriefInfo: ${compareBriefInfo}`);\n  // console.log(`compareDescription: ${compareDescription}`);\n  // console.log(`compareSource: ${compareSource}`);\n  // console.log(`compareNumber_of_Instance: ${compareNumber_of_Instance}`);\n  // console.log(`compareNumber_of_Attribute: ${compareNumber_of_Attribute}`);\n  // console.log(`compareLabel: ${compareLabel}`);\n  // console.log(`compareKeyWords: ${compareKeyWords(currentMetadata.Keywords, nextMetadata.Keywords)}`);\n  // console.log(`compareAttributes: ${compareAttributes(currentMetadata.AttrInfo, nextMetadata.AttrInfo)}`);\n  //console.log(`compareModelFiles ${compareModelFiles(currentModelFiles, nextModelFiles)}`);\n  //different matadata's length means the user changed metadata just now, the system needs to be updated\n\n  /** \n  if (currentMetadata.length !== nextMetadata.length) {\n      return true;\n  }*/\n  // different content of metadata means updating\n\n\n  if (compareBriefInfo || compareDescription || compareSource || compareNumber_of_Instance || compareNumber_of_Attribute || compareLabel || compareKeyWords(currentMetadata.Keywords, nextMetadata.Keywords) || compareAttributes(currentMetadata.AttrInfo, nextMetadata.AttrInfo) || compareModelFiles(currentModelFiles, nextModelFiles)) {\n    return true;\n  } // no different content of metadata means no updating\n  else {\n      return false;\n    }\n}\n\nexport default compareProps;","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/others/compareProps.js"],"names":["compareProps","currentMetadata","nextMetadata","currentModelFiles","nextModelFiles","compareBriefInfo","BriefInfo","compareDescription","Description","compareSource","Source","compareNumber_of_Instance","Number_of_Instance","compareNumber_of_Attribute","Number_of_Attribute","compareLabel","Label","compareKeyWords","currentKeywords","nextKeywords","length","result","map","value","index","includes","compareAttributes","currentAttributes","nextAttributes","attr_result","eachValue","Object","values","eachAttr","attrIndex","attr_result_final","eachResult","compareModelFiles","console","log","Keywords","AttrInfo"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,eAAtB,EAAuCC,YAAvC,EAAqDC,iBAArD,EAAwEC,cAAxE,EAAwF;AAEpF;AACA;AACA;AACA,QAAMC,gBAAgB,GAAIJ,eAAe,CAACK,SAAhB,KAA8BJ,YAAY,CAACI,SAA5C,GAAyD,IAAzD,GAAgE,KAAzF;AACA,QAAMC,kBAAkB,GAAIN,eAAe,CAACO,WAAhB,KAAgCN,YAAY,CAACM,WAA9C,GAA6D,IAA7D,GAAoE,KAA/F;AACA,QAAMC,aAAa,GAAIR,eAAe,CAACS,MAAhB,KAA2BR,YAAY,CAACQ,MAAzC,GAAmD,IAAnD,GAA0D,KAAhF;AACA,QAAMC,yBAAyB,GAAIV,eAAe,CAACW,kBAAhB,KAAuCV,YAAY,CAACU,kBAArD,GAA2E,IAA3E,GAAkF,KAApH;AACA,QAAMC,0BAA0B,GAAIZ,eAAe,CAACa,mBAAhB,KAAwCZ,YAAY,CAACY,mBAAtD,GAA6E,IAA7E,GAAoF,KAAvH;AACA,QAAMC,YAAY,GAAId,eAAe,CAACe,KAAhB,KAA0Bd,YAAY,CAACc,KAAxC,GAAiD,IAAjD,GAAwD,KAA7E;;AAEA,QAAMC,eAAe,GAAG,CAACC,eAAD,EAAkBC,YAAlB,KAAmC;AACvD;AACA,QAAID,eAAe,CAACE,MAAhB,KAA2BD,YAAY,CAACC,MAA5C,EAAoD;AAChD,aAAO,IAAP;AACH,KAFD,MAGK;AACD;AACA,YAAMC,MAAM,GAAGH,eAAe,CAACI,GAAhB,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjD,eAAOD,KAAK,KAAKJ,YAAY,CAACK,KAAD,CAAtB,GAAgC,QAAhC,GAA2C,UAAlD;AACH,OAFc,CAAf;AAIA,aAAOH,MAAM,CAACI,QAAP,CAAgB,QAAhB,CAAP;AACH;AACJ,GAbD;;AAeA,QAAMC,iBAAiB,GAAG,CAACC,iBAAD,EAAoBC,cAApB,KAAuC;AAC7D,QAAID,iBAAiB,CAACP,MAAlB,KAA6BQ,cAAc,CAACR,MAAhD,EAAwD;AACpD,aAAO,IAAP;AACH,KAFD,MAGK;AACD,YAAMS,WAAW,GAAGF,iBAAiB,CAACL,GAAlB,CAAsB,CAACQ,SAAD,EAAYN,KAAZ,KAAsB;AAC5D,eAAOO,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBR,GAAzB,CAA6B,CAACW,QAAD,EAAWC,SAAX,KAAyB;AACzD,iBAAOD,QAAQ,KAAKF,MAAM,CAACC,MAAP,CAAcJ,cAAc,CAACJ,KAAD,CAA5B,EAAqCU,SAArC,CAAb,GAA+D,QAA/D,GAA0E,UAAjF;AACH,SAFM,CAAP;AAGH,OAJmB,CAApB;AAMA,YAAMC,iBAAiB,GAAGN,WAAW,CAACP,GAAZ,CAAgBc,UAAU,IAAI;AACpD,eAAOA,UAAU,CAACX,QAAX,CAAoB,QAApB,IAAgC,QAAhC,GAA2C,UAAlD;AACH,OAFyB,CAA1B;AAGA,aAAOU,iBAAiB,CAACV,QAAlB,CAA2B,QAA3B,CAAP;AACH;AACJ,GAhBD;;AAkBA,QAAMY,iBAAiB,GAAG,CAAClC,iBAAD,EAAoBC,cAApB,KAAuC;AAC7D,QAAID,iBAAiB,CAACiB,MAAlB,KAA6BhB,cAAc,CAACgB,MAAhD,EAAwD;AACpD,aAAO,IAAP;AACH,KAFD,MAGK;AACD,YAAMS,WAAW,GAAG1B,iBAAiB,CAACmB,GAAlB,CAAsB,CAACQ,SAAD,EAAYN,KAAZ,KAAsB;AAC5D,eAAOO,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBR,GAAzB,CAA6B,CAACW,QAAD,EAAWC,SAAX,KAAyB;AACzD,iBAAOD,QAAQ,KAAKF,MAAM,CAACC,MAAP,CAAc5B,cAAc,CAACoB,KAAD,CAA5B,EAAqCU,SAArC,CAAb,GAA+D,QAA/D,GAA0E,UAAjF;AACH,SAFM,CAAP;AAGH,OAJmB,CAApB;AAMA,YAAMC,iBAAiB,GAAGN,WAAW,CAACP,GAAZ,CAAgBc,UAAU,IAAI;AACpD,eAAOA,UAAU,CAACX,QAAX,CAAoB,QAApB,IAAgC,QAAhC,GAA2C,UAAlD;AACH,OAFyB,CAA1B;AAGAa,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,WAAlC;AACA,aAAOM,iBAAiB,CAACV,QAAlB,CAA2B,QAA3B,CAAP;AACH;AACJ,GAjBD,CA7CoF,CAiEpF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACJ;AACA;AACA;AACI;;;AACA,MAAIpB,gBAAgB,IAAIE,kBAApB,IAA0CE,aAA1C,IAA2DE,yBAA3D,IACAE,0BADA,IAC8BE,YAD9B,IAC8CE,eAAe,CAAChB,eAAe,CAACuC,QAAjB,EAA2BtC,YAAY,CAACsC,QAAxC,CAD7D,IAEAd,iBAAiB,CAACzB,eAAe,CAACwC,QAAjB,EAA2BvC,YAAY,CAACuC,QAAxC,CAFjB,IAEsEJ,iBAAiB,CAAClC,iBAAD,EAAoBC,cAApB,CAF3F,EAEgI;AAC5H,WAAO,IAAP;AACH,GAJD,CAKA;AALA,OAMK;AACD,aAAO,KAAP;AACH;AACJ;;AAED,eAAeJ,YAAf","sourcesContent":["function compareProps(currentMetadata, nextMetadata, currentModelFiles, nextModelFiles) {\n\n    //console.log(\"compareMetadata: \", currentMetadata);\n    //console.log(\"nextMetadata: \", nextMetadata);\n    //console.log(\"nextBriefInfo: \", nextMetadata['BriefInfo']);\n    const compareBriefInfo = (currentMetadata.BriefInfo !== nextMetadata.BriefInfo) ? true : false;\n    const compareDescription = (currentMetadata.Description !== nextMetadata.Description) ? true : false;\n    const compareSource = (currentMetadata.Source !== nextMetadata.Source) ? true : false;\n    const compareNumber_of_Instance = (currentMetadata.Number_of_Instance !== nextMetadata.Number_of_Instance) ? true : false;\n    const compareNumber_of_Attribute = (currentMetadata.Number_of_Attribute !== nextMetadata.Number_of_Attribute) ? true : false;\n    const compareLabel = (currentMetadata.Label !== nextMetadata.Label) ? true : false;\n\n    const compareKeyWords = (currentKeywords, nextKeywords) => {\n        // if their lengths are different, meaning keywords got changed, so needs to be updated\n        if (currentKeywords.length !== nextKeywords.length) {\n            return true;\n        }\n        else {\n            // if some content in those kywords are different, then needs to update\n            const result = currentKeywords.map((value, index) => {\n                return value !== nextKeywords[index] ? \"update\" : \"noUpdate\"\n            });\n\n            return result.includes(\"update\");\n        }\n    };\n\n    const compareAttributes = (currentAttributes, nextAttributes) => {\n        if (currentAttributes.length !== nextAttributes.length) {\n            return true;\n        }\n        else {\n            const attr_result = currentAttributes.map((eachValue, index) => {\n                return Object.values(eachValue).map((eachAttr, attrIndex) => {\n                    return eachAttr !== Object.values(nextAttributes[index])[attrIndex] ? \"update\" : \"noUpdate\";\n                })\n            });\n\n            const attr_result_final = attr_result.map(eachResult => {\n                return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n            });\n            return attr_result_final.includes(\"update\");\n        }\n    };\n\n    const compareModelFiles = (currentModelFiles, nextModelFiles) => {\n        if (currentModelFiles.length !== nextModelFiles.length) {\n            return true;\n        }\n        else {\n            const attr_result = currentModelFiles.map((eachValue, index) => {\n                return Object.values(eachValue).map((eachAttr, attrIndex) => {\n                    return eachAttr !== Object.values(nextModelFiles[index])[attrIndex] ? \"update\" : \"noUpdate\";\n                })\n            });\n\n            const attr_result_final = attr_result.map(eachResult => {\n                return eachResult.includes(\"update\") ? \"update\" : \"noUpdate\";\n            });\n            console.log(\"briefInfo result: \", attr_result);\n            return attr_result_final.includes(\"update\");\n        }\n    };\n\n\n    // compare model files\n    // const compareModelFiles = (currentModelFiles, nextModelFiles) => {\n    //     console.log(\"currentModelFiles: \", currentModelFiles);\n    //     console.log(\"nextModelFiles: \", nextModelFiles);\n\n    //     if(currentModelFiles.length !== nextModelFiles.length){\n    //         console.log(\"because of model files\");\n    //         return true\n    //     }\n    //     else if (currentModelFiles.length !== 0 && nextModelFiles.length !== 0){\n    //         console.log(\"check current model: \", currentModelFiles);\n    //         console.log(\"check next model: \", nextModelFiles[0]);\n    //         const BriefInfo_result = currentModelFiles.map((eachModel, index) => {\n    //             console.log(\"current briefInfo: \", eachModel.BriefInfo);\n    //             console.log(\"next briefInfo1: \", nextModelFiles[index]);\n    //             const nextmodel = nextModelFiles[index];\n    //             console.log(\"next brirfInfo: \", nextmodel.BriefInfo);\n    //             return eachModel.BriefInfo !== nextModelFiles[index][\"BriefInfo\"] ? \"update\" : \"noUpdate\";\n    //         });\n    //         console.log(\"model result: \", BriefInfo_result);\n\n    //         return BriefInfo_result.includes(\"update\");\n    //     }\n    // }\n\n    // console.log(`compareBriefInfo: ${compareBriefInfo}`);\n    // console.log(`compareDescription: ${compareDescription}`);\n    // console.log(`compareSource: ${compareSource}`);\n    // console.log(`compareNumber_of_Instance: ${compareNumber_of_Instance}`);\n    // console.log(`compareNumber_of_Attribute: ${compareNumber_of_Attribute}`);\n    // console.log(`compareLabel: ${compareLabel}`);\n    // console.log(`compareKeyWords: ${compareKeyWords(currentMetadata.Keywords, nextMetadata.Keywords)}`);\n    // console.log(`compareAttributes: ${compareAttributes(currentMetadata.AttrInfo, nextMetadata.AttrInfo)}`);\n    //console.log(`compareModelFiles ${compareModelFiles(currentModelFiles, nextModelFiles)}`);\n\n    //different matadata's length means the user changed metadata just now, the system needs to be updated\n    /** \n    if (currentMetadata.length !== nextMetadata.length) {\n        return true;\n    }*/\n    // different content of metadata means updating\n    if (compareBriefInfo || compareDescription || compareSource || compareNumber_of_Instance ||\n        compareNumber_of_Attribute || compareLabel || compareKeyWords(currentMetadata.Keywords, nextMetadata.Keywords) ||\n        compareAttributes(currentMetadata.AttrInfo, nextMetadata.AttrInfo) || compareModelFiles(currentModelFiles, nextModelFiles)) {\n        return true\n    }\n    // no different content of metadata means no updating\n    else {\n        return false;\n    }\n}\n\nexport default compareProps;"]},"metadata":{},"sourceType":"module"}