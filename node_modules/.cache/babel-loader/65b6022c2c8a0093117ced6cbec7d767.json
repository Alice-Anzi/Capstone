{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/AlldatasetsComponent.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Table } from 'reactstrap';\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport { Link } from 'react-router-dom';\nimport { Loading } from './LoadingComponent';\nimport DownloadFile from '../components/Modal/downloadFile';\nimport SearchAllDatasets from './SearchAllDatasets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllDataset extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate() {\n    this.props.fetchDatasetFiles();\n  } // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\n  // dataset: array. JSON data stored inside.\n\n\n  tableHead(datasets) {\n    if (datasets !== undefined) {\n      return /*#__PURE__*/_jsxDEV(\"thead\", {\n        style: {\n          backgroundColor: '#FFE399',\n          color: \"black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"12%\",\n            children: \"File name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"20%\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"12%\",\n            children: \"User name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            width: \"8%\",\n            children: \"Operation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"The table for storing uploaded datasets does not exist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n  tableBody(datasets) {\n    // when there is no uploaded dataset in the database\n    if (datasets.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    } else {\n      // where are dataset stored in the database\n      return /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: datasets.map((eachDataset, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.FileName\n          }, 'name', false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.Description\n          }, 'Description', false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: eachDataset.UserName\n          }, 'Username', false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.operateDataset(true, eachDataset.FileName, eachDataset.UserName)\n          }, \"operateEachDataset\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n  } //showOperate: bool. the delete button and the create button will be disable\n\n\n  operateDataset(showOperate, fileName, userName) {\n    /**\n     if (icons === \"add only\") {\n            return (\n                <Container>\n                    <Row>\n                        <DatasetUpload addDataset={this.props.datasetfile} />\n                    </Row>\n                </Container>\n            );\n        }*/\n    if (showOperate) {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/alldataset/${fileName}?userName=${userName}&fileName=${fileName}`,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"detailed data\",\n              component: \"span\",\n              children: /*#__PURE__*/_jsxDEV(TableChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DownloadFile, {\n            downloadFile: this.props.downloadFile,\n            datasetName: fileName,\n            userName: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  renderDatasetTable(datasets, isLoading, errMess) {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this);\n    } else if (errMess) {\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: errMess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Table, {\n        hover: true,\n        style: {\n          tableLayout: 'fixed',\n          wordWrap: 'break-word'\n        },\n        children: [this.tableHead(datasets), this.tableBody(datasets)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"search-box\",\n        children: /*#__PURE__*/_jsxDEV(SearchAllDatasets, {\n          queryDatasets: this.props.queryDatasets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"database\",\n        children: this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AllDataset;","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/AlldatasetsComponent.js"],"names":["React","Component","Container","Row","Col","Table","IconButton","Modal","TableRow","TableChartIcon","Link","Loading","DownloadFile","SearchAllDatasets","AllDataset","constructor","props","componentDidUpdate","fetchDatasetFiles","tableHead","datasets","undefined","backgroundColor","color","tableBody","length","map","eachDataset","index","FileName","Description","UserName","operateDataset","showOperate","fileName","userName","downloadFile","renderDatasetTable","isLoading","errMess","tableLayout","wordWrap","render","queryDatasets","datasetFiles"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Table } from 'reactstrap';\nimport { IconButton, Modal, TableRow } from '@material-ui/core';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport { Link } from 'react-router-dom';\n\nimport { Loading } from './LoadingComponent';\nimport DownloadFile from '../components/Modal/downloadFile';\nimport SearchAllDatasets from './SearchAllDatasets';\n\nclass AllDataset extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate() {\n    this.props.fetchDatasetFiles();\n  }\n\n  // to create a flexible table head, where the number of columns depends on the attributes in the datafile.\n  // dataset: array. JSON data stored inside.\n  tableHead(datasets) {\n    if (datasets !== undefined) {\n      return (\n        <thead style={{backgroundColor: '#FFE399', color: \"black\"}}>\n          <tr>\n            <th width=\"12%\">File name</th>\n            <th width=\"20%\">Description</th>\n            <th width=\"12%\">User name</th>\n            <th width=\"8%\">Operation</th>\n          </tr>\n        </thead>\n      );\n    }\n\n    return (\n      <div>The table for storing uploaded datasets does not exist</div>\n    );\n  }\n\n  tableBody(datasets) {\n    // when there is no uploaded dataset in the database\n    if (datasets.length === 0) {\n      return (\n        <tbody />\n      );\n    }\n    else { // where are dataset stored in the database\n      return (\n        <tbody>\n          {datasets.map((eachDataset, index) =>\n            <tr key={index}>\n              <td key={'name'}>{eachDataset.FileName}</td>\n              <td key={'Description'}>{eachDataset.Description}</td>\n              <td key={'Username'}>{eachDataset.UserName}</td>\n              <td key={\"operateEachDataset\"}>{this.operateDataset(true, eachDataset.FileName, eachDataset.UserName)}</td>\n            </tr>\n          )}\n        </tbody>\n      );\n    }\n\n  }\n\n  //showOperate: bool. the delete button and the create button will be disable\n  operateDataset(showOperate, fileName, userName) {\n    /**\n     if (icons === \"add only\") {\n            return (\n                <Container>\n                    <Row>\n                        <DatasetUpload addDataset={this.props.datasetfile} />\n                    </Row>\n                </Container>\n            );\n        }*/\n    if (showOperate) {\n      return (\n        <Container>\n          <Row>\n            <Link to={`/alldataset/${fileName}?userName=${userName}&fileName=${fileName}`}>\n              <IconButton aria-label=\"detailed data\" component=\"span\">\n                <TableChartIcon />\n              </IconButton>\n            </Link>\n\n            <DownloadFile downloadFile={this.props.downloadFile} datasetName={fileName} userName={userName}/>\n          </Row>\n        </Container>\n      );\n    }\n  }\n\n  renderDatasetTable(datasets, isLoading, errMess) {\n    if (isLoading) {\n      return (\n        <Loading />\n      );\n    }\n    else if (errMess) {\n      return (\n        <h4>{errMess}</h4>\n      );\n    }\n    else {\n      return (\n        <Table hover style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\n          {this.tableHead(datasets)}\n          {this.tableBody(datasets)}\n        </Table>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Col className=\"search-box\" >\n          <SearchAllDatasets queryDatasets={this.props.queryDatasets}/>\n        </Col>\n\n        <Col className=\"database\">\n          {this.renderDatasetTable(this.props.datasetFiles, this.props.isLoading, this.props.errMess)}\n        </Col>\n      </Container>\n    );\n  }\n}\n\nexport default AllDataset;\n"]},"metadata":{},"sourceType":"module"}