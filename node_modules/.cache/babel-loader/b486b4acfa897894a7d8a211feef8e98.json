{"ast":null,"code":"var _jsxFileName = \"/Users/liuanzi/Desktop/Capstone/som/src/components/Modal/downloadFile.js\",\n    _s = $RefreshSig$();\n\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport { Modal, ModalHeader, ModalBody, Button, Row, Col, Label, Input } from 'reactstrap';\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport { IconButton, TableRow } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SettingsEthernetIcon from '@material-ui/icons/SettingsEthernet';\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = ['.txt', '.dat', '.csv'];\n\nfunction DownloadFile(props) {\n  _s();\n\n  //const [isModalOpen, setModal] = useState(false);\n  const [open, setOpen] = useState(false);\n  const anchorRef = useRef(null);\n\n  const handleMenuItemClick = (event, index) => {\n    let filename = props.datasetName.split(\".\")[0] + options[index];\n    console.log(\"download filename is : \", filename);\n    downloading(props.datasetName, filename, options[index]);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  }; // const toggleModal = () => {\n  //     setModal(!isModalOpen);\n  // };\n  // // while a user chooses not to delete a dataset\n  // const handlenNoBtn = () => {\n  //     setModal(!isModalOpen);\n  // };\n\n\n  const handleDownload = () => {\n    downloading();\n  };\n\n  const downloading = (datasetName, downloadName, downloadType) => {\n    props.downloadFile(datasetName, downloadName, downloadType, props.userName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      ref: anchorRef,\n      \"aria-controls\": open ? 'split-button-menu' : undefined,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-label\": \"select merge strategy\",\n      \"aria-haspopup\": \"menu\",\n      onClick: handleToggle,\n      children: /*#__PURE__*/_jsxDEV(GetAppIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Popper, {\n      style: {\n        zIndex: \"3\"\n      },\n      open: open,\n      anchorEl: anchorRef.current,\n      role: undefined,\n      transition: true,\n      disablePortal: true,\n      children: ({\n        TransitionProps,\n        placement\n      }) => /*#__PURE__*/_jsxDEV(Grow, { ...TransitionProps,\n        style: {\n          transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          children: /*#__PURE__*/_jsxDEV(ClickAwayListener, {\n            onClickAway: handleClose,\n            children: /*#__PURE__*/_jsxDEV(MenuList, {\n              id: \"split-button-menu\",\n              children: options.map((option, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                onClick: event => handleMenuItemClick(event, index),\n                children: option\n              }, option, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DownloadFile, \"FIn954K0DtsWqXZkIayVtQWUhUQ=\");\n\n_c = DownloadFile;\nexport default DownloadFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"DownloadFile\");","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/components/Modal/downloadFile.js"],"names":["GetAppIcon","Modal","ModalHeader","ModalBody","Button","Row","Col","Label","Input","React","useRef","useState","useEffect","useLayoutEffect","IconButton","TableRow","DeleteIcon","SettingsEthernetIcon","Control","LocalForm","Form","Errors","actions","ButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","ButtonGroup","ArrowDropDownIcon","ClickAwayListener","Grow","Paper","Popper","MenuItem","MenuList","options","DownloadFile","props","open","setOpen","anchorRef","handleMenuItemClick","event","index","filename","datasetName","split","console","log","downloading","handleToggle","prevOpen","handleClose","current","contains","target","handleDownload","downloadName","downloadType","downloadFile","userName","undefined","zIndex","TransitionProps","placement","transformOrigin","map","option"],"mappings":"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","sourcesContent":["import GetAppIcon from '@material-ui/icons/GetApp';\nimport { Modal, ModalHeader, ModalBody, Button, Row, Col, Label, Input } from 'reactstrap';\nimport React, { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport { IconButton, TableRow } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SettingsEthernetIcon from '@material-ui/icons/SettingsEthernet';\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nconst options = ['.txt', '.dat', '.csv'];\n\nfunction DownloadFile(props) {\n    //const [isModalOpen, setModal] = useState(false);\n\n    const [open, setOpen] = useState(false);\n    const anchorRef = useRef(null);\n\n    const handleMenuItemClick = (event, index) => {\n        let filename = props.datasetName.split(\".\")[0] + options[index];\n        console.log(\"download filename is : \", filename);\n\n        downloading(props.datasetName, filename, options[index]);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    // const toggleModal = () => {\n    //     setModal(!isModalOpen);\n    // };\n\n    // // while a user chooses not to delete a dataset\n    // const handlenNoBtn = () => {\n    //     setModal(!isModalOpen);\n    // };\n\n    const handleDownload = () => {\n        downloading();\n    };\n\n    const downloading = (datasetName, downloadName, downloadType) => {\n        props.downloadFile(datasetName, downloadName, downloadType, props.userName)\n    };\n\n\n    return (\n        <div>\n                <IconButton\n                    ref={anchorRef}\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                     <GetAppIcon/>\n                </IconButton>\n\n            <Popper style={{zIndex: \"3\"}} open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\">\n                                    {options.map((option, index) => (\n                                        <MenuItem\n                                            key={option}\n                                            onClick={(event) => handleMenuItemClick(event, index)}\n                                        >\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n\n            {/* <IconButton aria-label=\"delete a dataset\" component=\"span\">\n                <GetAppIcon onClick={handleDownload} />\n            </IconButton> */}\n\n            {/* <Modal isOpen={isModalOpen} toggle={toggleModal} centered={true}>\n                <ModalHeader toggle={toggleModal}>Bind Model</ModalHeader>\n                <ModalBody>\n                    <LocalForm onSubmit={(values) => handleSubmit(values)}>\n                        <input type=\"file\" onChange={onChange} />\n                        <Col>\n                            <Button type=\"submit\" onClick={handlenNoBtn}>Bind</Button>\n                        </Col>\n                    </LocalForm>\n                </ModalBody>\n            </Modal> */}\n        </div>\n\n    );\n}\n\nexport default DownloadFile;\n"]},"metadata":{},"sourceType":"module"}