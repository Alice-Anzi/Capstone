{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DATASETFILES } from '../database/datasetFiles';\nimport { MODELFILES } from '../database/modelFiles';\nimport { backendUrl } from '../server/backendUrl';\nimport http from \"../server/baseUrl\";\nimport baseUrl from '../server/baseUrl';\n/**\r\n * User\r\n */\n\nexport const login = data => dispatch => {\n  return http.post('/login', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    //console.log(data.username); \n    if (res.data === data.username) {\n      sessionStorage.setItem('verifiedUsername', res.data);\n      dispatch(updateUser(res.data)); // success\n    } else {\n      dispatch(updateUser(res));\n    }\n  }).catch(err => console.log(err));\n};\nexport const signUp = (data, cb) => dispatch => {\n  return http.post('/sign-up', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    cb(res.data);\n  }).catch(err => console.log(err));\n};\nexport const passwordChange = (data, cb) => dispatch => {\n  return http.post('/passwordChange', JSON.stringify(data), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    cb(res.data);\n  }).catch(err => console.log(err));\n};\nexport const updateUser = userInfo => ({\n  type: ActionTypes.LOGIN,\n  payload: userInfo\n});\n/**\r\n * Connect datasets and a model\r\n */\n// uploading a new model file\n\nexport const connectUploading = (files, onUploadProgress, username) => dispatch => {\n  console.log(\"connect start\"); // post the uploaded model to the backend server\n\n  return http.post('/connect-upload', files, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress\n  }).then(res => {\n    console.log(\"this is response for connection uploading\");\n    console.log(res.data);\n    dispatch(addConnections(res.data));\n    dispatch(fetchUploadedModel(username));\n    dispatch(fetchUploadedDataset(username));\n  });\n};\nexport const updateUploadingStatus = status => ({\n  type: ActionTypes.UPDATE_UPLOADINGSTATUS,\n  payload: status\n});\nexport const clearConnectionFiles = () => dispatch => {\n  dispatch(clearConnections());\n};\nexport const clearConnections = () => ({\n  type: ActionTypes.CLEAR_CONNECTIONS\n});\nexport const addConnections = filename => ({\n  type: ActionTypes.ADD_CONNECTIONS,\n  payload: filename\n});\nexport const bindModel = (modelname, username, datasetname) => dispatch => {\n  console.log(\"bind start\");\n  return http.post('/bind-model', [modelname, username, datasetname], {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for model binding\");\n    console.log(res);\n  });\n};\nexport const addBindedDatasets = bindedDatasets => ({\n  type: ActionTypes.ADD_BINDDATASETS,\n  payload: bindedDatasets\n});\nexport const bindedDatasetsLoading = () => ({\n  type: ActionTypes.BIND_LOADING\n});\nexport const getBindedDatasets = (modelname, username) => dispatch => {\n  console.log(\"start binded datasets\"); //dispatch(bindedDatasetsLoading(true));\n\n  return http.post('/get-bindedDatasets', [modelname, username], {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for bindedDatasets\");\n    console.log(res);\n    dispatch(addBindedDatasets(res.data));\n  });\n};\nexport const removeOneBindedDataset = datasetName => ({\n  type: ActionTypes.REMOVE_DATASET,\n  payload: datasetName\n}); // pass the filename to the backend server and tell it to delete corresponding dataset\n\nexport const deleteOneBindedDataset = (datasetName, userName) => dispatch => {\n  return http.post('/delete-bindeddataset', JSON.stringify([datasetName, userName]), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete binded dataset\");\n    console.log(res);\n    dispatch(removeOneBindedDataset(res.data));\n    dispatch(removeOneDataset(res.data));\n  }).catch(err => console.log(err));\n};\n/**\r\n * Dataset\r\n */\n// fetch datasets from the backend server\n\nexport const fetchDatasetFiles = userName => dispatch => {\n  //dispatch(datasetFilesLoading(true));\n  return http.post('/datasetFiles', JSON.stringify(userName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }) // backend address: Localhost: 5000/datasetFiles\n  .then(res => dispatch(addDatasetFiles(res.data))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n  .catch(err => console.log(err));\n};\nexport const datasetFilesLoading = () => ({\n  type: ActionTypes.DATASETFILES_LOADING\n});\nexport const datasetFilesFailed = errmess => ({\n  type: ActionTypes.DATASETFILES_FAILED,\n  payload: errmess\n});\nexport const addDatasetFiles = datasetFiles => ({\n  type: ActionTypes.ADD_DATASETFILES,\n  payload: datasetFiles\n});\nexport const addDataset = dataset => ({\n  type: ActionTypes.UPLOAD_DATASET,\n  payload: dataset\n}); //show all dataset\n\nexport const queryAllDatasets = inputValue => dispatch => {\n  return http.post('/detailedData', JSON.stringify(inputValue), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for querying datasets\");\n    console.log(res.data);\n    dispatch(addAllDatasetFiles(res.data));\n  }).catch(err => console.log(err));\n};\nexport const fetchAllDatasetFiles = () => dispatch => {\n  dispatch(allDatasetFilesLoading(true));\n  return fetch(backendUrl + 'alldatasetFiles') // backend address: Localhost: 5000/datasetFiles\n  .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n  .then(datasetFiles => dispatch(addAllDatasetFiles(datasetFiles))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n  .then(data => console.log(data));\n};\nexport const allDatasetFilesLoading = () => ({\n  type: ActionTypes.ALL_DATASETFILES_LOADING\n});\nexport const allDatasetFilesFailed = errmess => ({\n  type: ActionTypes.ALL_DATASETFILES_FAILED,\n  payload: errmess\n});\nexport const addAllDatasetFiles = datasetFiles => ({\n  type: ActionTypes.ADD_ALL_DATASETFILES,\n  payload: datasetFiles\n}); // uploading a new dataset file\n\nexport const uploadDataset = (dataset, onUploadProgress, username) => dispatch => {\n  // post the uploaded dataset to the backend server\n  return http.post('/upload', dataset, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress\n  }).then(res => {\n    console.log(\"this is response for uploading dataset\");\n    console.log(res);\n  }).then(res => {\n    dispatch(fetchUploadedDataset(username));\n  });\n}; // get the uploded dataset info when the uploading is done in the backend\n\nexport const fetchUploadedDataset = username => dispatch => {\n  console.log(\"start add new datasets\");\n  return http.post('/newDataset', JSON.stringify(username), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(res);\n    dispatch(addDataset(res.data));\n  });\n};\nexport const removeOneDataset = datasetName => ({\n  type: ActionTypes.REMOVE_DATASET,\n  payload: datasetName\n}); // pass the filename to the backend server and tell it to delete corresponding dataset\n\nexport const deleteOneDataset = (datasetName, userName) => dispatch => {\n  return http.post('/delete-dataset', JSON.stringify([datasetName, userName]), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete dataset\");\n    console.log(res);\n    dispatch(removeOneDataset(res.data));\n  }).catch(err => console.log(err));\n}; //query datasets\n\nexport const checkQueryDatasets = datasetFiles => ({\n  type: ActionTypes.QUERY_DATASETFILES,\n  payload: datasetFiles\n});\nexport const queryDatasets = (inputValue, userName) => dispatch => {\n  return http.post('/query-datasets', JSON.stringify([inputValue, userName]), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for querying datasets\");\n    console.log(res.data);\n    dispatch(checkQueryDatasets(res.data));\n  }).catch(err => console.log(err));\n};\nexport const downloadFile = (datasetName, downloadName, downloadType, username) => dispatch => {\n  console.log(\"start downloading\");\n  return http.post('/downloader', [datasetName, username, downloadType], {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for downloading dataset\");\n    console.log(res);\n    const element = document.createElement('a');\n    const file = new Blob([res.data]);\n    element.href = URL.createObjectURL(file);\n    element.download = downloadName;\n    document.body.appendChild(element);\n    element.click();\n  });\n};\n/**\r\n * Models\r\n */\n// fetch models from the backend server\n\nexport const fetchAllModels = () => dispatch => {\n  return fetch(backendUrl + 'allmodels') // backend address: Localhost: 5000/datasetFiles\n  .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\n  .then(models => dispatch(addAllModels(models))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\n  .then(data => console.log(data));\n};\nexport const addAllModels = models => ({\n  type: ActionTypes.ADD_ALL_MODELS,\n  payload: models\n});\nexport const fetchModelFiles = (userName, isLoading = true) => dispatch => {\n  // test\n  // return dispatch(addModelFiles(MODELFILES))\n  console.log(\"check loading: \", isLoading);\n  dispatch(modelFilesLoading(isLoading));\n  return http.post('/modelFiles', JSON.stringify(userName), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }) // backend address: Localhost: 5000/modelFiles\n  .then(res => {\n    console.log(res);\n    dispatch(addModelFiles(res.data));\n  }) // when the modelFiles is obtained, we dispatch it into addModelFiles()\n  .catch(err => console.log(err));\n};\nexport const modelFilesLoading = () => ({\n  type: ActionTypes.MODELFILES_LOADING\n});\nexport const modelFilesFailed = errmess => ({\n  type: ActionTypes.MODELFILES_FAILED,\n  payload: errmess\n});\nexport const addModelFiles = modelFiles => ({\n  type: ActionTypes.ADD_MODELFILES,\n  payload: modelFiles\n});\nexport const addModel = model => ({\n  type: ActionTypes.UPLOAD_MODEL,\n  payload: model\n}); // uploading a new model file\n\nexport const uploadModel = (model, onUploadProgress, username) => dispatch => {\n  // post the uploaded model to the backend server\n  return http.post('/upload-model', model, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress\n  }).then(res => {\n    console.log(\"this is response model\");\n    console.log(res);\n  }).then(res => {\n    dispatch(fetchUploadedModel(username));\n  });\n}; // get the uploded model info when the uploading is done in the backend\n\nexport const fetchUploadedModel = username => dispatch => {\n  return http.post('/newModel', JSON.stringify(username), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(model => {\n    console.log(model);\n    dispatch(addModel(model.data));\n  });\n};\nexport const removeOneModel = modelName => ({\n  type: ActionTypes.REMOVE_MODEL,\n  payload: modelName\n});\nexport const editOneModelDescription = (modelName, description) => ({\n  type: ActionTypes.EDIT_MODEL_DESCRIPTION,\n  payload: {\n    modelName,\n    description\n  }\n}); // pass the filename to the backend server and tell it to delete corresponding model\n\nexport const deleteOneModel = (modelName, userName) => dispatch => {\n  console.log(\"delete model: \", [modelName]);\n  return http.post('/delete-model', JSON.stringify([modelName, userName]), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for delete model\");\n    console.log(res);\n    dispatch(removeOneModel(res.data));\n  }).catch(err => console.log(err));\n};\nexport const editModelDescription = (modelName, description, userName) => dispatch => {\n  console.log(\"edit user name: \", userName);\n  return http.post('/edit-model-desc', JSON.stringify({\n    modelName,\n    description,\n    userName\n  }), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for edit model\");\n    console.log(res);\n    dispatch(editOneModelDescription(modelName, description));\n  }).catch(err => console.log(err));\n}; //query datasets\n\nexport const queryModels = (inputValue, userName) => dispatch => {\n  console.log(\"start query models\");\n  return http.post('/query-models', JSON.stringify([inputValue, userName]), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for querying models\");\n    console.log(res.data);\n    dispatch(addModelFiles(res.data));\n  }).catch(err => console.log(err));\n};\n/**\r\n * Metadata\r\n */\n// submit metadata of a dataset\n\nexport const submitMetadata = metadata => dispatch => {\n  return http.post('/submit-metadata', JSON.stringify(metadata), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for metadata\");\n    console.log(res);\n    dispatch(addMetadata(res.data));\n  }).catch(err => console.log(err));\n};\nexport const addMetadata = metadata => ({\n  type: ActionTypes.ADD_METADATA,\n  payload: metadata\n});\nexport const addAllMetadata = metadata => ({\n  type: ActionTypes.ADD_ALLMETADATA,\n  payload: metadata\n});\nexport const metadataFailed = errmess => ({\n  type: ActionTypes.METADATA_FAILED,\n  payload: errmess\n});\nexport const metadataLoading = () => ({\n  type: ActionTypes.METADATA_LOADING\n});\nexport const allMetadataFailed = errmess => ({\n  type: ActionTypes.ALLMETADATA_FAILED,\n  payload: errmess\n});\nexport const allMetadataLoading = () => ({\n  type: ActionTypes.ALLMETADATA_LOADING\n});\n/**\r\n * Detailed data\r\n */\n\nexport const sendNameForDetailedData = (datasetName, userName) => dispatch => {\n  console.log(\"start detailed loading\");\n  return http.post('/detailedData-name', JSON.stringify([datasetName, userName]), {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(\"this is response for detailed data\");\n    console.log(res.data);\n    dispatch(addDetailedData(res.data[0]));\n    dispatch(addMetadata(res.data[1]));\n    const datasetName = res.data[1][0].FileName;\n    const briefInfo = res.data[1][0].BriefInfo;\n    const briefInfo_datasetName = [datasetName, briefInfo];\n    dispatch(modifyBriefInfo(briefInfo_datasetName));\n  }).catch(err => console.log(err));\n};\nexport const modifyBriefInfo = briefInfo_datasetName => ({\n  type: ActionTypes.MODIFY_BRIFINFO,\n  payload: briefInfo_datasetName\n});\nexport const addDetailedData = detaileddata => ({\n  type: ActionTypes.ADD_DETAILEDDATA,\n  payload: detaileddata\n});\nexport const detailedDataFailed = errmess => ({\n  type: ActionTypes.DETAILEDDATA_FAILED,\n  payload: errmess\n});\nexport const detailedDataLoading = () => ({\n  type: ActionTypes.DETAILEDDATA_LOADING\n});\nexport const addAllDetailedData = detaileddata => ({\n  type: ActionTypes.ADD_ALLDETAILEDDATA,\n  payload: detaileddata\n});\nexport const detailedAllDataFailed = errmess => ({\n  type: ActionTypes.ALLDETAILEDDATA_FAILED,\n  payload: errmess\n});\nexport const detailedAllDataLoading = () => ({\n  type: ActionTypes.ALLDETAILEDDATA_LOADING\n});","map":{"version":3,"sources":["/Users/liuanzi/Desktop/Capstone/som/src/redux/ActionCreators.js"],"names":["ActionTypes","DATASETFILES","MODELFILES","backendUrl","http","baseUrl","login","data","dispatch","post","JSON","stringify","headers","then","res","username","sessionStorage","setItem","updateUser","catch","err","console","log","signUp","cb","passwordChange","userInfo","type","LOGIN","payload","connectUploading","files","onUploadProgress","addConnections","fetchUploadedModel","fetchUploadedDataset","updateUploadingStatus","status","UPDATE_UPLOADINGSTATUS","clearConnectionFiles","clearConnections","CLEAR_CONNECTIONS","filename","ADD_CONNECTIONS","bindModel","modelname","datasetname","addBindedDatasets","bindedDatasets","ADD_BINDDATASETS","bindedDatasetsLoading","BIND_LOADING","getBindedDatasets","removeOneBindedDataset","datasetName","REMOVE_DATASET","deleteOneBindedDataset","userName","removeOneDataset","fetchDatasetFiles","addDatasetFiles","datasetFilesLoading","DATASETFILES_LOADING","datasetFilesFailed","errmess","DATASETFILES_FAILED","datasetFiles","ADD_DATASETFILES","addDataset","dataset","UPLOAD_DATASET","queryAllDatasets","inputValue","addAllDatasetFiles","fetchAllDatasetFiles","allDatasetFilesLoading","fetch","response","json","ALL_DATASETFILES_LOADING","allDatasetFilesFailed","ALL_DATASETFILES_FAILED","ADD_ALL_DATASETFILES","uploadDataset","deleteOneDataset","checkQueryDatasets","QUERY_DATASETFILES","queryDatasets","downloadFile","downloadName","downloadType","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","fetchAllModels","models","addAllModels","ADD_ALL_MODELS","fetchModelFiles","isLoading","modelFilesLoading","addModelFiles","MODELFILES_LOADING","modelFilesFailed","MODELFILES_FAILED","modelFiles","ADD_MODELFILES","addModel","model","UPLOAD_MODEL","uploadModel","removeOneModel","modelName","REMOVE_MODEL","editOneModelDescription","description","EDIT_MODEL_DESCRIPTION","deleteOneModel","editModelDescription","queryModels","submitMetadata","metadata","addMetadata","ADD_METADATA","addAllMetadata","ADD_ALLMETADATA","metadataFailed","METADATA_FAILED","metadataLoading","METADATA_LOADING","allMetadataFailed","ALLMETADATA_FAILED","allMetadataLoading","ALLMETADATA_LOADING","sendNameForDetailedData","addDetailedData","FileName","briefInfo","BriefInfo","briefInfo_datasetName","modifyBriefInfo","MODIFY_BRIFINFO","detaileddata","ADD_DETAILEDDATA","detailedDataFailed","DETAILEDDATA_FAILED","detailedDataLoading","DETAILEDDATA_LOADING","addAllDetailedData","ADD_ALLDETAILEDDATA","detailedAllDataFailed","ALLDETAILEDDATA_FAILED","detailedAllDataLoading","ALLDETAILEDDATA_LOADING"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { DATASETFILES } from '../database/datasetFiles';\r\nimport { MODELFILES } from '../database/modelFiles';\r\nimport { backendUrl } from '../server/backendUrl';\r\nimport http from \"../server/baseUrl\";\r\nimport baseUrl from '../server/baseUrl';\r\n/**\r\n * User\r\n */\r\nexport const login = (data) => (dispatch) => {\r\n  return http.post('/login', JSON.stringify(data), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      //console.log(data.username); \r\n      if (res.data === data.username) {\r\n        sessionStorage.setItem('verifiedUsername', res.data);\r\n        dispatch(updateUser(res.data));// success\r\n      }\r\n      else {\r\n        dispatch(updateUser(res));\r\n      }\r\n\r\n    })\r\n    .catch((err) => console.log(err));\r\n\r\n}\r\nexport const signUp = (data, cb) => (dispatch) => {\r\n\r\n  return http.post('/sign-up', JSON.stringify(data), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  }).then(res => {\r\n    cb(res.data)\r\n  })\r\n    .catch((err) => console.log(err));\r\n}\r\nexport const passwordChange = (data, cb) => (dispatch) => {\r\n  return http.post('/passwordChange', JSON.stringify(data), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  }).then(res => {\r\n    cb(res.data)\r\n  })\r\n    .catch((err) => console.log(err));\r\n}\r\nexport const updateUser = (userInfo) => ({\r\n  type: ActionTypes.LOGIN,\r\n  payload: userInfo\r\n});\r\n\r\n/**\r\n * Connect datasets and a model\r\n */\r\n// uploading a new model file\r\nexport const connectUploading = (files, onUploadProgress, username) => (dispatch) => {\r\n  console.log(\"connect start\");\r\n  // post the uploaded model to the backend server\r\n  return http.post('/connect-upload', files, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for connection uploading\");\r\n      console.log(res.data);\r\n      dispatch(addConnections(res.data));\r\n      dispatch(fetchUploadedModel(username));\r\n      dispatch(fetchUploadedDataset(username));\r\n\r\n    });\r\n};\r\n\r\nexport const updateUploadingStatus = (status) => ({\r\n  type: ActionTypes.UPDATE_UPLOADINGSTATUS,\r\n  payload: status\r\n});\r\n\r\nexport const clearConnectionFiles = () => (dispatch) => {\r\n  dispatch(clearConnections());\r\n}\r\n\r\nexport const clearConnections = () => ({\r\n  type: ActionTypes.CLEAR_CONNECTIONS\r\n});\r\n\r\nexport const addConnections = (filename) => ({\r\n  type: ActionTypes.ADD_CONNECTIONS,\r\n  payload: filename\r\n});\r\n\r\nexport const bindModel = (modelname, username, datasetname) => (dispatch) => {\r\n  console.log(\"bind start\");\r\n  return http.post('/bind-model', [modelname, username, datasetname], {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for model binding\");\r\n      console.log(res);\r\n    });\r\n};\r\n\r\nexport const addBindedDatasets = (bindedDatasets) => ({\r\n  type: ActionTypes.ADD_BINDDATASETS,\r\n  payload: bindedDatasets\r\n});\r\n\r\nexport const bindedDatasetsLoading = () => ({\r\n  type: ActionTypes.BIND_LOADING\r\n});\r\n\r\nexport const getBindedDatasets = (modelname, username) => (dispatch) => {\r\n  console.log(\"start binded datasets\");\r\n  //dispatch(bindedDatasetsLoading(true));\r\n\r\n  return http.post('/get-bindedDatasets', [modelname, username], {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for bindedDatasets\");\r\n      console.log(res);\r\n      dispatch(addBindedDatasets(res.data))\r\n    });\r\n\r\n};\r\n\r\nexport const removeOneBindedDataset = (datasetName) => ({\r\n  type: ActionTypes.REMOVE_DATASET,\r\n  payload: datasetName\r\n});\r\n\r\n// pass the filename to the backend server and tell it to delete corresponding dataset\r\nexport const deleteOneBindedDataset = (datasetName, userName) => (dispatch) => {\r\n  return http.post('/delete-bindeddataset', JSON.stringify([datasetName, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for delete binded dataset\");\r\n      console.log(res);\r\n      dispatch(removeOneBindedDataset(res.data));\r\n      dispatch(removeOneDataset(res.data));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n/**\r\n * Dataset\r\n */\r\n// fetch datasets from the backend server\r\nexport const fetchDatasetFiles = (userName) => (dispatch) => {\r\n\r\n  //dispatch(datasetFilesLoading(true));\r\n\r\n  return http.post('/datasetFiles', JSON.stringify(userName), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  }) // backend address: Localhost: 5000/datasetFiles\r\n    .then(res => dispatch(addDatasetFiles(res.data))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\nexport const datasetFilesLoading = () => ({\r\n  type: ActionTypes.DATASETFILES_LOADING\r\n});\r\n\r\nexport const datasetFilesFailed = (errmess) => ({\r\n  type: ActionTypes.DATASETFILES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addDatasetFiles = (datasetFiles) => ({\r\n  type: ActionTypes.ADD_DATASETFILES,\r\n  payload: datasetFiles\r\n});\r\n\r\nexport const addDataset = (dataset) => ({\r\n  type: ActionTypes.UPLOAD_DATASET,\r\n  payload: dataset\r\n});\r\n\r\n//show all dataset\r\nexport const queryAllDatasets = (inputValue) => (dispatch) => {\r\n  return http.post('/detailedData', JSON.stringify(inputValue), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }})\r\n    .then(res => {\r\n      console.log(\"this is response for querying datasets\");\r\n      console.log(res.data);\r\n      dispatch(addAllDatasetFiles(res.data))\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const fetchAllDatasetFiles = () => (dispatch) => {\r\n\r\n  dispatch(allDatasetFilesLoading(true));\r\n  return fetch(backendUrl + 'alldatasetFiles') // backend address: Localhost: 5000/datasetFiles\r\n    .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\r\n    .then(datasetFiles => dispatch(addAllDatasetFiles(datasetFiles))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\r\n    .then(data => console.log(data));\r\n}\r\n\r\nexport const allDatasetFilesLoading = () => ({\r\n  type: ActionTypes.ALL_DATASETFILES_LOADING\r\n});\r\n\r\nexport const allDatasetFilesFailed = (errmess) => ({\r\n  type: ActionTypes.ALL_DATASETFILES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addAllDatasetFiles = (datasetFiles) => ({\r\n    type: ActionTypes.ADD_ALL_DATASETFILES,\r\n    payload: datasetFiles\r\n});\r\n\r\n\r\n// uploading a new dataset file\r\nexport const uploadDataset = (dataset, onUploadProgress, username) => (dispatch) => {\r\n  // post the uploaded dataset to the backend server\r\n  return http.post('/upload', dataset, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for uploading dataset\");\r\n      console.log(res);\r\n    })\r\n    .then(res => {\r\n      dispatch(fetchUploadedDataset(username));\r\n    })\r\n};\r\n\r\n// get the uploded dataset info when the uploading is done in the backend\r\nexport const fetchUploadedDataset = (username) => (dispatch) => {\r\n  console.log(\"start add new datasets\");\r\n  return http.post('/newDataset', JSON.stringify(username), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(res)\r\n      dispatch(addDataset(res.data));\r\n    })\r\n};\r\n\r\nexport const removeOneDataset = (datasetName) => ({\r\n  type: ActionTypes.REMOVE_DATASET,\r\n  payload: datasetName\r\n});\r\n\r\n// pass the filename to the backend server and tell it to delete corresponding dataset\r\nexport const deleteOneDataset = (datasetName, userName) => (dispatch) => {\r\n  return http.post('/delete-dataset', JSON.stringify([datasetName, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for delete dataset\");\r\n      console.log(res);\r\n      dispatch(removeOneDataset(res.data));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n//query datasets\r\nexport const checkQueryDatasets = (datasetFiles) => ({\r\n  type: ActionTypes.QUERY_DATASETFILES,\r\n  payload: datasetFiles\r\n});\r\n\r\nexport const queryDatasets = (inputValue, userName) => (dispatch) => {\r\n  return http.post('/query-datasets', JSON.stringify([inputValue, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for querying datasets\");\r\n      console.log(res.data);\r\n      dispatch(checkQueryDatasets(res.data))\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const downloadFile = (datasetName, downloadName, downloadType, username) => (dispatch) => {\r\n  console.log(\"start downloading\");\r\n  return http.post('/downloader', [datasetName, username, downloadType], {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for downloading dataset\");\r\n      console.log(res);\r\n      const element = document.createElement('a');\r\n      const file = new Blob([res.data]);\r\n\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = downloadName;\r\n      document.body.appendChild(element);\r\n      element.click();\r\n    })\r\n\r\n};\r\n\r\n\r\n/**\r\n * Models\r\n */\r\n// fetch models from the backend server\r\nexport const fetchAllModels = () => (dispatch) => {\r\n  return fetch(backendUrl + 'allmodels') // backend address: Localhost: 5000/datasetFiles\r\n    .then(response => response.json()) // when the promise resolved, we convert the incoming response into JSON by calling response.json\r\n    .then(models => dispatch(addAllModels(models))) // when the datasetFiles is obtained, we dispatch it into addDatasetFiles()\r\n    .then(data => console.log(data));\r\n}\r\n\r\nexport const addAllModels = (models) => ({\r\n  type: ActionTypes.ADD_ALL_MODELS,\r\n  payload: models\r\n});\r\n\r\nexport const fetchModelFiles = (userName, isLoading = true) => (dispatch) => {\r\n  // test\r\n  // return dispatch(addModelFiles(MODELFILES))\r\n  console.log(\"check loading: \", isLoading);\r\n  dispatch(modelFilesLoading(isLoading));\r\n\r\n  return http.post('/modelFiles', JSON.stringify(userName), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  }) // backend address: Localhost: 5000/modelFiles\r\n    .then(res => {\r\n      console.log(res)\r\n      dispatch(addModelFiles(res.data))\r\n    }) // when the modelFiles is obtained, we dispatch it into addModelFiles()\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\nexport const modelFilesLoading = () => ({\r\n  type: ActionTypes.MODELFILES_LOADING\r\n});\r\n\r\nexport const modelFilesFailed = (errmess) => ({\r\n  type: ActionTypes.MODELFILES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addModelFiles = (modelFiles) => ({\r\n  type: ActionTypes.ADD_MODELFILES,\r\n  payload: modelFiles\r\n});\r\n\r\nexport const addModel = (model) => ({\r\n  type: ActionTypes.UPLOAD_MODEL,\r\n  payload: model\r\n});\r\n\r\n// uploading a new model file\r\nexport const uploadModel = (model, onUploadProgress, username) => (dispatch) => {\r\n  // post the uploaded model to the backend server\r\n  return http.post('/upload-model', model, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response model\");\r\n      console.log(res);\r\n    })\r\n    .then(res => {\r\n      dispatch(fetchUploadedModel(username));\r\n    })\r\n};\r\n\r\n// get the uploded model info when the uploading is done in the backend\r\nexport const fetchUploadedModel = (username) => (dispatch) => {\r\n  return http.post('/newModel', JSON.stringify(username), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(model => {\r\n      console.log(model)\r\n      dispatch(addModel(model.data));\r\n    })\r\n};\r\n\r\nexport const removeOneModel = (modelName) => ({\r\n  type: ActionTypes.REMOVE_MODEL,\r\n  payload: modelName\r\n});\r\n\r\nexport const editOneModelDescription = (modelName, description) => ({\r\n  type: ActionTypes.EDIT_MODEL_DESCRIPTION,\r\n  payload: { modelName, description }\r\n});\r\n\r\n// pass the filename to the backend server and tell it to delete corresponding model\r\nexport const deleteOneModel = (modelName, userName) => (dispatch) => {\r\n  console.log(\"delete model: \", [modelName])\r\n  return http.post('/delete-model', JSON.stringify([modelName, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for delete model\");\r\n      console.log(res);\r\n      dispatch(removeOneModel(res.data));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const editModelDescription = (modelName, description, userName) => (dispatch) => {\r\n  console.log(\"edit user name: \", userName)\r\n  return http.post('/edit-model-desc', JSON.stringify({ modelName, description, userName }), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for edit model\");\r\n      console.log(res);\r\n      dispatch(editOneModelDescription(modelName, description));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n//query datasets\r\nexport const queryModels = (inputValue, userName) => (dispatch) => {\r\n  console.log(\"start query models\");\r\n  return http.post('/query-models', JSON.stringify([inputValue, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for querying models\");\r\n      console.log(res.data);\r\n      dispatch(addModelFiles(res.data))\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n\r\n\r\n/**\r\n * Metadata\r\n */\r\n// submit metadata of a dataset\r\nexport const submitMetadata = (metadata) => (dispatch) => {\r\n  return http.post('/submit-metadata', JSON.stringify(metadata), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for metadata\");\r\n      console.log(res);\r\n      dispatch(addMetadata(res.data));\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addMetadata = (metadata) => ({\r\n  type: ActionTypes.ADD_METADATA,\r\n  payload: metadata\r\n});\r\n\r\nexport const addAllMetadata = (metadata) => ({\r\n  type: ActionTypes.ADD_ALLMETADATA,\r\n  payload: metadata\r\n});\r\n\r\nexport const metadataFailed = (errmess) => ({\r\n  type: ActionTypes.METADATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const metadataLoading = () => ({\r\n  type: ActionTypes.METADATA_LOADING\r\n});\r\n\r\nexport const allMetadataFailed = (errmess) => ({\r\n  type: ActionTypes.ALLMETADATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const allMetadataLoading = () => ({\r\n  type: ActionTypes.ALLMETADATA_LOADING\r\n});\r\n\r\n/**\r\n * Detailed data\r\n */\r\nexport const sendNameForDetailedData = (datasetName, userName) => (dispatch) => {\r\n  console.log(\"start detailed loading\");\r\n  return http.post('/detailedData-name', JSON.stringify([datasetName, userName]), {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    }\r\n  })\r\n    .then(res => {\r\n      console.log(\"this is response for detailed data\");\r\n      console.log(res.data);\r\n      dispatch(addDetailedData(res.data[0]));\r\n      dispatch(addMetadata(res.data[1]));\r\n\r\n      const datasetName = res.data[1][0].FileName;\r\n      const briefInfo = res.data[1][0].BriefInfo;\r\n      const briefInfo_datasetName = [datasetName, briefInfo];\r\n      dispatch(modifyBriefInfo(briefInfo_datasetName));\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\nexport const modifyBriefInfo = (briefInfo_datasetName) => ({\r\n  type: ActionTypes.MODIFY_BRIFINFO,\r\n  payload: briefInfo_datasetName\r\n});\r\n\r\nexport const addDetailedData = (detaileddata) => ({\r\n  type: ActionTypes.ADD_DETAILEDDATA,\r\n  payload: detaileddata\r\n});\r\n\r\nexport const detailedDataFailed = (errmess) => ({\r\n  type: ActionTypes.DETAILEDDATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const detailedDataLoading = () => ({\r\n  type: ActionTypes.DETAILEDDATA_LOADING\r\n});\r\n\r\n\r\nexport const addAllDetailedData = (detaileddata) => ({\r\n  type: ActionTypes.ADD_ALLDETAILEDDATA,\r\n  payload: detaileddata\r\n});\r\n\r\nexport const detailedAllDataFailed = (errmess) => ({\r\n  type: ActionTypes.ALLDETAILEDDATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const detailedAllDataLoading = () => ({\r\n  type: ActionTypes.ALLDETAILEDDATA_LOADING\r\n});\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}